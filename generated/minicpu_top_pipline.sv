// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module pre_IF(	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
  input  [31:0] io_offs_ext,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:4:14
                io_gr_rj,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:4:14
                io_pc,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:4:14
  input         io_base_pc_from_rj,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:4:14
  output [31:0] io_nextpc	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:4:14
);

  assign io_nextpc = io_offs_ext + (io_base_pc_from_rj ? io_gr_rj : io_pc);	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7, :20:24, :21:29
endmodule

module IF_stage(	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
  input         clock,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
                reset,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
  output        io_valid,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:25:14
  input         io_needBlock,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:25:14
                io_br_taken,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:25:14
  input  [31:0] io_nextpc,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:25:14
                io_inst_sram_rdata,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:25:14
  output [31:0] io_inst,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:25:14
                io_inst_sram_addr,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:25:14
                io_pc	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:25:14
);

  reg         valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:36:22
  reg  [31:0] inst_pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:38:24
  wire [31:0] _io_inst_sram_addr_T = inst_pc + 32'h4;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:38:24, :45:83
  always @(posedge clock) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
    if (reset) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
      valid <= 1'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7, :36:22
      inst_pc <= 32'h1BFFFFFC;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:38:24
    end
    else begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
      valid <= 1'h1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7, :36:22
      if (io_needBlock) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:25:14
      end
      else if (io_br_taken)	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:25:14
        inst_pc <= io_nextpc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:38:24
      else	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:25:14
        inst_pc <= _io_inst_sram_addr_T;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:38:24, :45:83
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
    `ifdef FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
      `FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
      automatic logic [31:0] _RANDOM[0:1];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
      `ifdef INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
        `INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
        end	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
        valid = _RANDOM[1'h0][0];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7, :36:22
        inst_pc = {_RANDOM[1'h0][31:1], _RANDOM[1'h1][0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7, :36:22, :38:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
      `FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_valid = valid & ~io_needBlock;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7, :36:22, :41:8, :44:18
  assign io_inst = io_inst_sram_rdata;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7
  assign io_inst_sram_addr =
    io_needBlock ? inst_pc : io_br_taken ? io_nextpc : _io_inst_sram_addr_T;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7, :38:24, :45:{27,52,83}
  assign io_pc = inst_pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:24:7, :38:24
endmodule

module N_2N_Decoder(	// \\src\\main\\scala\\cpu\\tool.scala:4:7
  input  [5:0]  io_in,	// \\src\\main\\scala\\cpu\\tool.scala:5:14
  output [63:0] io_out	// \\src\\main\\scala\\cpu\\tool.scala:5:14
);

  assign io_out = 64'h1 << io_in;	// \\src\\main\\scala\\cpu\\tool.scala:4:7, :10:17
endmodule

module N_2N_Decoder_1(	// \\src\\main\\scala\\cpu\\tool.scala:4:7
  input  [4:0]  io_in,	// \\src\\main\\scala\\cpu\\tool.scala:5:14
  output [31:0] io_out	// \\src\\main\\scala\\cpu\\tool.scala:5:14
);

  assign io_out = 32'h1 << io_in;	// \\src\\main\\scala\\cpu\\tool.scala:4:7, :10:17
endmodule

module N_2N_Decoder_2(	// \\src\\main\\scala\\cpu\\tool.scala:4:7
  input  [3:0]  io_in,	// \\src\\main\\scala\\cpu\\tool.scala:5:14
  output [15:0] io_out	// \\src\\main\\scala\\cpu\\tool.scala:5:14
);

  assign io_out = 16'h1 << io_in;	// \\src\\main\\scala\\cpu\\tool.scala:4:7, :10:17
endmodule

module N_2N_Decoder_3(	// \\src\\main\\scala\\cpu\\tool.scala:4:7
  input  [1:0] io_in,	// \\src\\main\\scala\\cpu\\tool.scala:5:14
  output [3:0] io_out	// \\src\\main\\scala\\cpu\\tool.scala:5:14
);

  assign io_out = 4'h1 << io_in;	// \\src\\main\\scala\\cpu\\tool.scala:4:7, :10:17
endmodule

module Inst_Frag_Decoder_pipline(	// \\src\\main\\scala\\cpu\\tool.scala:91:7
  input  [16:0] io_op,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
  input         io_rj_eq_rd,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
                io_rj_less_rd,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
                io_rj_lessu_rd,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
  output        io_cs_src_reg_is_rd,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
                io_cs_w_addr_is_1,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
                io_cs_rf_we,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
  output [4:0]  io_cs_sel_src2,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
  output        io_cs_src1_is_pc,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
  output [12:0] io_cs_alu_op,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
  output [1:0]  io_cs_mul_op,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
  output [2:0]  io_cs_div_op,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
  output        io_cs_mem_we,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
  output [2:0]  io_cs_mem_pattern,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
  output        io_cs_wb_from_mem,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
                io_cs_sign_ext_offs26,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
                io_cs_base_pc_add_offs,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
                io_cs_base_pc_from_rj,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
                io_cs_need_rf_raddr1,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
                io_cs_need_rf_raddr2,	// \\src\\main\\scala\\cpu\\tool.scala:111:14
                io_cs_inst_cancel	// \\src\\main\\scala\\cpu\\tool.scala:111:14
);

  wire [3:0]  _Decoder2_4_io_out;	// \\src\\main\\scala\\cpu\\tool.scala:121:26
  wire [15:0] _Decoder4_16_io_out;	// \\src\\main\\scala\\cpu\\tool.scala:120:27
  wire [31:0] _Decoder5_32_io_out;	// \\src\\main\\scala\\cpu\\tool.scala:119:27
  wire [63:0] _Decoder6_64_io_out;	// \\src\\main\\scala\\cpu\\tool.scala:118:27
  wire        inst_add_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[0];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55,76,83,95}
  wire        inst_sub_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[2];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55,76}, :132:{83,95}
  wire        inst_slt =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[4];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55,76}, :133:{83,95}
  wire        inst_sltu =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[5];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55,76}, :134:{83,95}
  wire        inst_nor =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[8];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55,76}, :135:{83,95}
  wire        inst_pcaddu12i = _Decoder6_64_io_out[7] & ~(io_op[10]);	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :136:{34,46,49,55}
  wire        inst_and =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[9];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55,76}, :137:{83,95}
  wire        inst_or =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[10];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55,76}, :138:{83,95}
  wire        inst_xor =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[11];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55,76}, :139:{83,95}
  wire        inst_andi = _Decoder6_64_io_out[0] & _Decoder4_16_io_out[13];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :120:27, :131:31, :140:{43,55}
  wire        inst_ori = _Decoder6_64_io_out[0] & _Decoder4_16_io_out[14];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :120:27, :131:31, :141:{43,55}
  wire        inst_xori = _Decoder6_64_io_out[0] & _Decoder4_16_io_out[15];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :120:27, :131:31, :142:{43,55}
  wire        inst_mul_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[24];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55,76}, :144:{83,95}
  wire        inst_mulh_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[25];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55,76}, :145:{83,95}
  wire        inst_mulh_wu =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[26];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55,76}, :146:{83,95}
  wire        inst_div_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[2]
    & _Decoder5_32_io_out[0];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55,95}, :148:{76,83}
  wire        inst_mod_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[2]
    & _Decoder5_32_io_out[1];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55}, :148:76, :149:{83,95}
  wire        inst_div_wu =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[2]
    & _Decoder5_32_io_out[2];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55}, :132:95, :148:76, :150:83
  wire        inst_mod_wu =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[2]
    & _Decoder5_32_io_out[3];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55}, :148:76, :151:{83,95}
  wire        inst_addi_w = _Decoder6_64_io_out[0] & _Decoder4_16_io_out[10];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :120:27, :131:31, :153:{43,55}
  wire        inst_lu12i_w = _Decoder6_64_io_out[5] & ~(io_op[10]);	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :136:55, :154:{31,43,46}
  wire        inst_slti = _Decoder6_64_io_out[0] & _Decoder4_16_io_out[8];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :120:27, :131:31, :155:{43,55}
  wire        inst_sltui = _Decoder6_64_io_out[0] & _Decoder4_16_io_out[9];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :120:27, :131:31, :156:{43,55}
  wire        inst_sll_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[14];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55,76}, :158:{83,95}
  wire        inst_srl_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[15];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55,76}, :159:{83,95}
  wire        inst_sra_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[16];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:{31,55,76}, :160:{83,95}
  wire        inst_slli_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[1] & _Decoder2_4_io_out[0]
    & _Decoder5_32_io_out[1];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:31, :149:95, :162:{55,76,83}
  wire        inst_srli_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[1] & _Decoder2_4_io_out[0]
    & _Decoder5_32_io_out[9];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:31, :137:95, :162:{55,76}, :163:83
  wire        inst_srai_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[1] & _Decoder2_4_io_out[0]
    & _Decoder5_32_io_out[17];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :119:27, :120:27, :121:26, :131:31, :162:{55,76}, :164:{83,95}
  wire        inst_ld_b = _Decoder6_64_io_out[10] & _Decoder4_16_io_out[0];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :120:27, :131:55, :176:{29,41}
  wire        inst_ld_h = _Decoder6_64_io_out[10] & _Decoder4_16_io_out[1];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :120:27, :162:55, :176:29, :177:41
  wire        inst_ld_w = _Decoder6_64_io_out[10] & _Decoder4_16_io_out[2];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :120:27, :176:29, :178:{41,53}
  wire        inst_ld_bu = _Decoder6_64_io_out[10] & _Decoder4_16_io_out[8];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :120:27, :155:55, :176:29, :179:41
  wire        inst_ld_hu = _Decoder6_64_io_out[10] & _Decoder4_16_io_out[9];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :120:27, :156:55, :176:29, :180:41
  wire        inst_st_b = _Decoder6_64_io_out[10] & _Decoder4_16_io_out[4];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :120:27, :176:29, :182:{41,53}
  wire        inst_st_h = _Decoder6_64_io_out[10] & _Decoder4_16_io_out[5];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :120:27, :176:29, :183:{41,53}
  wire        inst_st_w = _Decoder6_64_io_out[10] & _Decoder4_16_io_out[6];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :120:27, :176:29, :184:{41,53}
  wire        _io_cs_need_rf_raddr2_T = inst_add_w | inst_sub_w;	// \\src\\main\\scala\\cpu\\tool.scala:131:83, :132:83, :190:26
  wire        src2_is_4 = _Decoder6_64_io_out[19] | _Decoder6_64_io_out[21];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :166:29, :168:29, :201:28
  wire        _div_or_mod_T = inst_div_w | inst_div_wu;	// \\src\\main\\scala\\cpu\\tool.scala:148:83, :150:83, :205:34
  wire        _io_cs_inst_cancel_T = _Decoder6_64_io_out[19] | _Decoder6_64_io_out[20];	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :166:29, :167:29, :233:38
  wire        _io_cs_inst_cancel_T_2 = _Decoder6_64_io_out[22] & io_rj_eq_rd;	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :169:29, :233:63
  wire        _io_cs_inst_cancel_T_7 = _Decoder6_64_io_out[24] & io_rj_less_rd;	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :171:29, :234:38
  wire        _io_cs_inst_cancel_T_9 = _Decoder6_64_io_out[26] & io_rj_lessu_rd;	// \\src\\main\\scala\\cpu\\tool.scala:118:27, :173:29, :234:65
  N_2N_Decoder Decoder6_64 (	// \\src\\main\\scala\\cpu\\tool.scala:118:27
    .io_in  (io_op[16:11]),	// \\src\\main\\scala\\cpu\\tool.scala:122:29
    .io_out (_Decoder6_64_io_out)
  );
  N_2N_Decoder_1 Decoder5_32 (	// \\src\\main\\scala\\cpu\\tool.scala:119:27
    .io_in  (io_op[4:0]),	// \\src\\main\\scala\\cpu\\tool.scala:125:29
    .io_out (_Decoder5_32_io_out)
  );
  N_2N_Decoder_2 Decoder4_16 (	// \\src\\main\\scala\\cpu\\tool.scala:120:27
    .io_in  (io_op[10:7]),	// \\src\\main\\scala\\cpu\\tool.scala:123:29
    .io_out (_Decoder4_16_io_out)
  );
  N_2N_Decoder_3 Decoder2_4 (	// \\src\\main\\scala\\cpu\\tool.scala:121:26
    .io_in  (io_op[6:5]),	// \\src\\main\\scala\\cpu\\tool.scala:124:28
    .io_out (_Decoder2_4_io_out)
  );
  assign io_cs_src_reg_is_rd =
    _Decoder6_64_io_out[22] | _Decoder6_64_io_out[23] | inst_st_w
    | _Decoder6_64_io_out[24] | _Decoder6_64_io_out[26] | _Decoder6_64_io_out[25]
    | _Decoder6_64_io_out[27] | inst_st_b | inst_st_h;	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :118:27, :169:29, :170:29, :171:29, :172:29, :173:29, :174:29, :182:41, :183:41, :184:41, :187:35
  assign io_cs_w_addr_is_1 = _Decoder6_64_io_out[21];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :118:27, :168:29
  assign io_cs_rf_we =
    _io_cs_need_rf_raddr2_T | inst_slt | inst_sltu | inst_nor | inst_and | inst_or
    | inst_xor | inst_addi_w | inst_pcaddu12i | inst_lu12i_w | inst_slli_w | inst_srli_w
    | inst_srai_w | inst_sll_w | inst_srl_w | inst_sra_w | _Decoder6_64_io_out[19]
    | _Decoder6_64_io_out[21] | inst_ld_w | inst_slti | inst_sltui | inst_andi | inst_ori
    | inst_xori | inst_mul_w | inst_mulh_w | inst_mulh_wu | inst_div_w | inst_div_wu
    | inst_mod_w | inst_mod_wu | inst_ld_b | inst_ld_bu | inst_ld_h | inst_ld_hu;	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :118:27, :133:83, :134:83, :135:83, :136:46, :137:83, :138:83, :139:83, :140:43, :141:43, :142:43, :144:83, :145:83, :146:83, :148:83, :149:83, :150:83, :151:83, :153:43, :154:43, :155:43, :156:43, :158:83, :159:83, :160:83, :162:83, :163:83, :164:83, :166:29, :168:29, :176:41, :177:41, :178:41, :179:41, :180:41, :190:26, :194:46
  assign io_cs_sel_src2 =
    {_io_cs_need_rf_raddr2_T | inst_slt | inst_sltu | inst_nor | inst_and | inst_or
       | inst_xor | inst_sll_w | inst_srl_w | inst_sra_w | inst_mul_w | inst_mulh_w
       | inst_mulh_wu | inst_div_w | inst_div_wu | inst_mod_w | inst_mod_wu,
     inst_andi | inst_ori | inst_xori,
     inst_addi_w | inst_ld_w | inst_st_w | inst_slli_w | inst_srli_w | inst_srai_w
       | inst_slti | inst_sltui | inst_ld_b | inst_ld_bu | inst_ld_h | inst_ld_hu
       | inst_st_b | inst_st_h,
     inst_lu12i_w | inst_pcaddu12i,
     src2_is_4};	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :133:83, :134:83, :135:83, :136:46, :137:83, :138:83, :139:83, :140:43, :141:43, :142:43, :144:83, :145:83, :146:83, :148:83, :149:83, :150:83, :151:83, :153:43, :154:43, :155:43, :156:43, :158:83, :159:83, :160:83, :162:83, :163:83, :164:83, :176:41, :177:41, :178:41, :179:41, :180:41, :182:41, :183:41, :184:41, :190:26, :196:203, :197:40, :199:73, :200:34, :201:28, :202:24
  assign io_cs_src1_is_pc = src2_is_4 | inst_pcaddu12i;	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :136:46, :201:28, :203:40
  assign io_cs_alu_op =
    {inst_add_w | inst_addi_w | _Decoder6_64_io_out[19] | _Decoder6_64_io_out[21]
       | inst_pcaddu12i | inst_ld_b | inst_ld_bu | inst_ld_h | inst_ld_hu | inst_st_b
       | inst_st_h,
     inst_sub_w,
     inst_slt | inst_slti,
     inst_sltu | inst_sltui,
     inst_nor,
     inst_and | inst_andi,
     inst_or | inst_ori,
     inst_xor | inst_xori,
     inst_lu12i_w,
     inst_slli_w | inst_sll_w,
     inst_srli_w | inst_srl_w,
     inst_srai_w | inst_sra_w,
     inst_mul_w | inst_mulh_w | inst_mulh_wu};	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :118:27, :131:83, :132:83, :133:83, :134:83, :135:83, :136:46, :137:83, :138:83, :139:83, :140:43, :141:43, :142:43, :144:83, :145:83, :146:83, :153:43, :154:43, :155:43, :156:43, :158:83, :159:83, :160:83, :162:83, :163:83, :164:83, :166:29, :168:29, :176:41, :177:41, :179:41, :180:41, :182:41, :183:41, :210:124, :211:39, :214:27, :215:31, :216:31, :217:31, :218:31, :219:31, :220:31, :221:31, :223:22
  assign io_cs_mul_op = {inst_mulh_w | inst_mulh_wu, inst_mulh_w};	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :145:83, :146:83, :212:28, :222:21
  assign io_cs_div_op =
    {_div_or_mod_T | inst_mod_w | inst_mod_wu,
     _div_or_mod_T & ~(inst_mod_w | inst_mod_wu),
     (inst_div_w | inst_mod_w) & ~(inst_div_wu | inst_mod_wu)};	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :148:83, :149:83, :150:83, :151:83, :205:{34,57}, :206:{44,47,59}, :207:{36,48,51,64}, :208:22
  assign io_cs_mem_we = inst_st_w | inst_st_b | inst_st_h;	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :182:41, :183:41, :184:41, :229:38
  assign io_cs_mem_pattern =
    {inst_ld_w | inst_st_w,
     (inst_ld_b | inst_ld_bu | inst_st_b) & ~(inst_ld_h | inst_ld_hu | inst_st_h),
     (inst_ld_b | inst_ld_h) & ~(inst_ld_bu | inst_ld_hu)};	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :176:41, :177:41, :178:41, :179:41, :180:41, :182:41, :183:41, :184:41, :226:26, :227:{38,49,51,73}, :228:{27,38,40,52}, :230:26
  assign io_cs_wb_from_mem = inst_ld_w | inst_ld_b | inst_ld_bu | inst_ld_h | inst_ld_hu;	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :176:41, :177:41, :178:41, :179:41, :180:41, :231:64
  assign io_cs_sign_ext_offs26 = _Decoder6_64_io_out[20] | _Decoder6_64_io_out[21];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :118:27, :167:29, :168:29, :232:34
  assign io_cs_base_pc_add_offs =
    _io_cs_inst_cancel_T | _Decoder6_64_io_out[21] | _io_cs_inst_cancel_T_2
    | _Decoder6_64_io_out[23] & ~io_rj_eq_rd | _io_cs_inst_cancel_T_7
    | _io_cs_inst_cancel_T_9 | _Decoder6_64_io_out[25] & ~io_rj_less_rd
    | _Decoder6_64_io_out[27] & ~io_rj_lessu_rd;	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :118:27, :168:29, :170:29, :172:29, :174:29, :233:{38,63,87,90}, :234:{38,65}, :235:{38,41,57,68,71}
  assign io_cs_base_pc_from_rj = _Decoder6_64_io_out[19];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :118:27, :166:29
  assign io_cs_need_rf_raddr1 =
    _io_cs_need_rf_raddr2_T | inst_addi_w | inst_slt | inst_sltu | inst_and | inst_or
    | inst_nor | inst_xor | inst_slli_w | inst_srli_w | inst_srai_w
    | _Decoder6_64_io_out[22] | _Decoder6_64_io_out[23] | _Decoder6_64_io_out[19]
    | inst_st_w | inst_ld_w | inst_slti | inst_sltui | inst_andi | inst_ori | inst_xori
    | inst_sll_w | inst_srl_w | inst_sra_w | inst_mul_w | inst_mulh_w | inst_mulh_wu
    | inst_div_w | inst_div_wu | inst_mod_w | inst_mod_wu | _Decoder6_64_io_out[24]
    | _Decoder6_64_io_out[26] | _Decoder6_64_io_out[25] | _Decoder6_64_io_out[27]
    | inst_ld_b | inst_ld_bu | inst_ld_h | inst_ld_hu | inst_st_b | inst_st_h;	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :118:27, :133:83, :134:83, :135:83, :137:83, :138:83, :139:83, :140:43, :141:43, :142:43, :144:83, :145:83, :146:83, :148:83, :149:83, :150:83, :151:83, :153:43, :155:43, :156:43, :158:83, :159:83, :160:83, :162:83, :163:83, :164:83, :166:29, :169:29, :170:29, :171:29, :172:29, :173:29, :174:29, :176:41, :177:41, :178:41, :179:41, :180:41, :182:41, :183:41, :184:41, :190:26, :243:76
  assign io_cs_need_rf_raddr2 =
    _io_cs_need_rf_raddr2_T | inst_slt | inst_sltu | inst_and | inst_or | inst_nor
    | inst_xor | _Decoder6_64_io_out[22] | _Decoder6_64_io_out[23] | inst_st_w
    | inst_sll_w | inst_srl_w | inst_sra_w | inst_mul_w | inst_mulh_w | inst_mulh_wu
    | inst_div_w | inst_div_wu | inst_mod_w | inst_mod_wu | _Decoder6_64_io_out[24]
    | _Decoder6_64_io_out[26] | _Decoder6_64_io_out[25] | _Decoder6_64_io_out[27]
    | inst_st_b | inst_st_h;	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :118:27, :133:83, :134:83, :135:83, :137:83, :138:83, :139:83, :144:83, :145:83, :146:83, :148:83, :149:83, :150:83, :151:83, :158:83, :159:83, :160:83, :169:29, :170:29, :171:29, :172:29, :173:29, :174:29, :182:41, :183:41, :184:41, :190:26, :248:72
  assign io_cs_inst_cancel =
    _io_cs_inst_cancel_T | _Decoder6_64_io_out[21] | _io_cs_inst_cancel_T_2
    | _Decoder6_64_io_out[23] & ~io_rj_eq_rd | _io_cs_inst_cancel_T_7
    | _io_cs_inst_cancel_T_9 | _Decoder6_64_io_out[25] & ~io_rj_less_rd
    | _Decoder6_64_io_out[27] & ~io_rj_lessu_rd;	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :118:27, :168:29, :170:29, :172:29, :174:29, :233:{38,63,90}, :234:{38,65}, :235:{41,71}, :250:80, :252:{31,50,61}
endmodule

module RegFile(	// \\src\\main\\scala\\cpu\\tool.scala:255:7
  input         clock,	// \\src\\main\\scala\\cpu\\tool.scala:255:7
                reset,	// \\src\\main\\scala\\cpu\\tool.scala:255:7
  input  [4:0]  io_raddr1,	// \\src\\main\\scala\\cpu\\tool.scala:256:14
                io_raddr2,	// \\src\\main\\scala\\cpu\\tool.scala:256:14
  output [31:0] io_rdata1,	// \\src\\main\\scala\\cpu\\tool.scala:256:14
                io_rdata2,	// \\src\\main\\scala\\cpu\\tool.scala:256:14
  input         io_we,	// \\src\\main\\scala\\cpu\\tool.scala:256:14
  input  [4:0]  io_waddr,	// \\src\\main\\scala\\cpu\\tool.scala:256:14
  input  [31:0] io_wdata	// \\src\\main\\scala\\cpu\\tool.scala:256:14
);

  reg  [31:0]       reg_0;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_1;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_2;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_3;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_4;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_5;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_6;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_7;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_8;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_9;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_10;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_11;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_12;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_13;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_14;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_15;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_16;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_17;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_18;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_19;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_20;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_21;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_22;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_23;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_24;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_25;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_26;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_27;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_28;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_29;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_30;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  reg  [31:0]       reg_31;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
  wire [31:0][31:0] _GEN =
    {{reg_31},
     {reg_30},
     {reg_29},
     {reg_28},
     {reg_27},
     {reg_26},
     {reg_25},
     {reg_24},
     {reg_23},
     {reg_22},
     {reg_21},
     {reg_20},
     {reg_19},
     {reg_18},
     {reg_17},
     {reg_16},
     {reg_15},
     {reg_14},
     {reg_13},
     {reg_12},
     {reg_11},
     {reg_10},
     {reg_9},
     {reg_8},
     {reg_7},
     {reg_6},
     {reg_5},
     {reg_4},
     {reg_3},
     {reg_2},
     {reg_1},
     {reg_0}};	// \\src\\main\\scala\\cpu\\tool.scala:267:20, :275:19
  always @(posedge clock) begin	// \\src\\main\\scala\\cpu\\tool.scala:255:7
    if (reset) begin	// \\src\\main\\scala\\cpu\\tool.scala:255:7
      reg_0 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_1 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_2 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_3 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_4 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_5 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_6 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_7 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_8 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_9 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_10 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_11 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_12 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_13 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_14 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_15 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_16 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_17 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_18 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_19 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_20 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_21 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_22 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_23 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_24 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_25 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_26 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_27 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_28 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_29 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_30 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
      reg_31 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:267:{20,28}
    end
    else begin	// \\src\\main\\scala\\cpu\\tool.scala:255:7
      automatic logic _GEN_0 = io_we & (|io_waddr);	// \\src\\main\\scala\\cpu\\tool.scala:269:{14,26}
      if (_GEN_0 & ~(|io_waddr))	// \\src\\main\\scala\\cpu\\tool.scala:267:20, :269:{14,26,35}, :270:19
        reg_0 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h1)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_1 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h2)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_2 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h3)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_3 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h4)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_4 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h5)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_5 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h6)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_6 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h7)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_7 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h8)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_8 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h9)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_9 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'hA)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_10 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'hB)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_11 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'hC)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_12 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'hD)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_13 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'hE)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_14 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'hF)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_15 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h10)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_16 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h11)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_17 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h12)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_18 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h13)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_19 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h14)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_20 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h15)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_21 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h16)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_22 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h17)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_23 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h18)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_24 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h19)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_25 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h1A)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_26 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h1B)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_27 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h1C)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_28 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h1D)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_29 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & io_waddr == 5'h1E)	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20, :269:{14,35}, :270:19
        reg_30 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
      if (_GEN_0 & (&io_waddr))	// \\src\\main\\scala\\cpu\\tool.scala:267:20, :269:{14,35}, :270:19
        reg_31 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:267:20
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// \\src\\main\\scala\\cpu\\tool.scala:255:7
    `ifdef FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\tool.scala:255:7
      `FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\tool.scala:255:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// \\src\\main\\scala\\cpu\\tool.scala:255:7
      automatic logic [31:0] _RANDOM[0:31];	// \\src\\main\\scala\\cpu\\tool.scala:255:7
      `ifdef INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\tool.scala:255:7
        `INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\tool.scala:255:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// \\src\\main\\scala\\cpu\\tool.scala:255:7
        for (logic [5:0] i = 6'h0; i < 6'h20; i += 6'h1) begin
          _RANDOM[i[4:0]] = `RANDOM;	// \\src\\main\\scala\\cpu\\tool.scala:255:7
        end	// \\src\\main\\scala\\cpu\\tool.scala:255:7
        reg_0 = _RANDOM[5'h0];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_1 = _RANDOM[5'h1];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_2 = _RANDOM[5'h2];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_3 = _RANDOM[5'h3];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_4 = _RANDOM[5'h4];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_5 = _RANDOM[5'h5];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_6 = _RANDOM[5'h6];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_7 = _RANDOM[5'h7];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_8 = _RANDOM[5'h8];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_9 = _RANDOM[5'h9];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_10 = _RANDOM[5'hA];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_11 = _RANDOM[5'hB];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_12 = _RANDOM[5'hC];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_13 = _RANDOM[5'hD];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_14 = _RANDOM[5'hE];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_15 = _RANDOM[5'hF];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_16 = _RANDOM[5'h10];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_17 = _RANDOM[5'h11];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_18 = _RANDOM[5'h12];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_19 = _RANDOM[5'h13];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_20 = _RANDOM[5'h14];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_21 = _RANDOM[5'h15];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_22 = _RANDOM[5'h16];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_23 = _RANDOM[5'h17];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_24 = _RANDOM[5'h18];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_25 = _RANDOM[5'h19];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_26 = _RANDOM[5'h1A];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_27 = _RANDOM[5'h1B];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_28 = _RANDOM[5'h1C];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_29 = _RANDOM[5'h1D];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_30 = _RANDOM[5'h1E];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
        reg_31 = _RANDOM[5'h1F];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:20
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\tool.scala:255:7
      `FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\tool.scala:255:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_rdata1 = io_raddr1 == 5'h0 ? 32'h0 : _GEN[io_raddr1];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:28, :275:{19,30}
  assign io_rdata2 = io_raddr2 == 5'h0 ? 32'h0 : _GEN[io_raddr2];	// \\src\\main\\scala\\cpu\\tool.scala:255:7, :267:28, :275:19, :276:{19,30}
endmodule

module ID_stage(	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
  input         clock,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
                reset,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
                io_pre_valid,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
                io_next_ready,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  output        io_valid,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  input  [31:0] io_inst,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
                io_pc_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
                io_forward_rf_rdata1,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
                io_forward_rf_rdata2,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  input         io_rf_we_WB,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  input  [31:0] io_wb_data,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  input  [4:0]  io_wb_addr_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  output [4:0]  io_wb_addr_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  output        io_rf_we_ID,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  output [12:0] io_alu_op,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  output [1:0]  io_mul_op,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  output [2:0]  io_div_op,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  output        io_mem_we,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  output [2:0]  io_mem_pattern,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  output        io_wb_from_mem,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
                io_br_taken,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
                io_base_pc_from_rj,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  output [31:0] io_pc_offs,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
                io_src1,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
                io_src2,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
                io_to_forward_rf_data1,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
                io_to_forward_rf_data2,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
                io_rf_data1,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
                io_rf_data2,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
                io_pc_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  output        io_need_rf_raddr1,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
                io_need_rf_raddr2,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  output [4:0]  io_rf_raddr1,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
                io_rf_raddr2,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
  input         io_needBlock	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
);

  wire        _inst_frag_decoder_io_cs_src_reg_is_rd;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:120:33
  wire        _inst_frag_decoder_io_cs_w_addr_is_1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:120:33
  wire [4:0]  _inst_frag_decoder_io_cs_sel_src2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:120:33
  wire        _inst_frag_decoder_io_cs_src1_is_pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:120:33
  wire        _inst_frag_decoder_io_cs_sign_ext_offs26;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:120:33
  wire        _inst_frag_decoder_io_cs_base_pc_add_offs;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:120:33
  wire        _inst_frag_decoder_io_cs_inst_cancel;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:120:33
  reg         valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:88:22
  reg  [31:0] inst;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:89:21
  reg  [31:0] pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:91:19
  wire        io_valid_0 = valid & ~io_needBlock;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:88:22, :100:{20,23}
  wire [4:0]  io_rf_raddr2_0 =
    _inst_frag_decoder_io_cs_src_reg_is_rd ? inst[4:0] : inst[14:10];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:89:21, :109:16, :110:16, :120:33, :147:20
  wire [9:0]  _GEN =
    _inst_frag_decoder_io_cs_sign_ext_offs26 ? inst[9:0] : {10{inst[25]}};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:89:21, :115:24, :120:33, :172:20
  always @(posedge clock) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
    if (reset) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
      valid <= 1'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:88:22
      inst <= 32'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:89:21, src/main/scala/chisel3/util/Mux.scala:30:73
      pc <= 32'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:91:19, src/main/scala/chisel3/util/Mux.scala:30:73
    end
    else if (io_pre_valid) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
      valid <= ~(_inst_frag_decoder_io_cs_inst_cancel & io_valid_0);	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:88:22, :94:23, :100:20, :120:33, :142:51
      inst <= io_inst;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:89:21
      pc <= io_pc_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:91:19
    end
    else	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:50:14
      valid <= ~(valid & io_next_ready & ~io_needBlock) & valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:88:22, :97:{34,37,52}, :98:11
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
    `ifdef FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
      `FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
      automatic logic [31:0] _RANDOM[0:2];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
      `ifdef INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
        `INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
        end	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
        valid = _RANDOM[2'h0][0];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7, :88:22
        inst = {_RANDOM[2'h0][31:1], _RANDOM[2'h1][0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7, :88:22, :89:21
        pc = {_RANDOM[2'h1][31:1], _RANDOM[2'h2][0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7, :89:21, :91:19
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
      `FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Inst_Frag_Decoder_pipline inst_frag_decoder (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:120:33
    .io_op                  (inst[31:15]),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:89:21, :107:21
    .io_rj_eq_rd            (io_forward_rf_rdata1 == io_forward_rf_rdata2),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:159:24
    .io_rj_less_rd
      ($signed(io_forward_rf_rdata1) < $signed(io_forward_rf_rdata2)),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:160:24
    .io_rj_lessu_rd         (io_forward_rf_rdata1 < io_forward_rf_rdata2),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:161:31
    .io_cs_src_reg_is_rd    (_inst_frag_decoder_io_cs_src_reg_is_rd),
    .io_cs_w_addr_is_1      (_inst_frag_decoder_io_cs_w_addr_is_1),
    .io_cs_rf_we            (io_rf_we_ID),
    .io_cs_sel_src2         (_inst_frag_decoder_io_cs_sel_src2),
    .io_cs_src1_is_pc       (_inst_frag_decoder_io_cs_src1_is_pc),
    .io_cs_alu_op           (io_alu_op),
    .io_cs_mul_op           (io_mul_op),
    .io_cs_div_op           (io_div_op),
    .io_cs_mem_we           (io_mem_we),
    .io_cs_mem_pattern      (io_mem_pattern),
    .io_cs_wb_from_mem      (io_wb_from_mem),
    .io_cs_sign_ext_offs26  (_inst_frag_decoder_io_cs_sign_ext_offs26),
    .io_cs_base_pc_add_offs (_inst_frag_decoder_io_cs_base_pc_add_offs),
    .io_cs_base_pc_from_rj  (io_base_pc_from_rj),
    .io_cs_need_rf_raddr1   (io_need_rf_raddr1),
    .io_cs_need_rf_raddr2   (io_need_rf_raddr2),
    .io_cs_inst_cancel      (_inst_frag_decoder_io_cs_inst_cancel)
  );
  RegFile rf_regfile (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:144:26
    .clock     (clock),
    .reset     (reset),
    .io_raddr1 (inst[9:5]),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:89:21, :108:16
    .io_raddr2 (io_rf_raddr2_0),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:147:20
    .io_rdata1 (io_to_forward_rf_data1),
    .io_rdata2 (io_to_forward_rf_data2),
    .io_we     (io_rf_we_WB),
    .io_waddr  (io_wb_addr_in),
    .io_wdata  (io_wb_data)
  );
  assign io_valid = io_valid_0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7, :100:20
  assign io_wb_addr_out = _inst_frag_decoder_io_cs_w_addr_is_1 ? 5'h1 : inst[4:0];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7, :89:21, :110:16, :120:33, :148:18
  assign io_br_taken = _inst_frag_decoder_io_cs_base_pc_add_offs & io_valid_0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7, :100:20, :120:33, :138:58
  assign io_pc_offs = {{4{_GEN[9]}}, _GEN, inst[25:10], 2'h0};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7, :89:21, :114:20, :172:{14,20}
  assign io_src1 = _inst_frag_decoder_io_cs_src1_is_pc ? pc : io_forward_rf_rdata1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7, :91:19, :120:33, :168:17
  assign io_src2 =
    {29'h0, _inst_frag_decoder_io_cs_sel_src2[0], 2'h0}
    | (_inst_frag_decoder_io_cs_sel_src2[1] ? {inst[24:5], 12'h0} : 32'h0)
    | (_inst_frag_decoder_io_cs_sel_src2[2] ? {{20{inst[21]}}, inst[21:10]} : 32'h0)
    | (_inst_frag_decoder_io_cs_sel_src2[3] ? {20'h0, inst[21:10]} : 32'h0)
    | (_inst_frag_decoder_io_cs_sel_src2[4] ? io_forward_rf_rdata2 : 32'h0);	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7, :89:21, :111:18, :113:18, :120:33, :165:23, :167:22, src/main/scala/chisel3/util/Mux.scala:30:73, :32:36
  assign io_rf_data1 = io_forward_rf_rdata1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
  assign io_rf_data2 = io_forward_rf_rdata2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7
  assign io_pc_out = pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7, :91:19
  assign io_rf_raddr1 = inst[9:5];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7, :89:21, :108:16
  assign io_rf_raddr2 = io_rf_raddr2_0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:49:7, :147:20
endmodule

module ALU(	// \\src\\main\\scala\\cpu\\tool.scala:278:7
  input  [12:0] io_alu_op,	// \\src\\main\\scala\\cpu\\tool.scala:279:14
  input  [1:0]  io_mul_op,	// \\src\\main\\scala\\cpu\\tool.scala:279:14
  input  [31:0] io_src1,	// \\src\\main\\scala\\cpu\\tool.scala:279:14
                io_src2,	// \\src\\main\\scala\\cpu\\tool.scala:279:14
  output [31:0] io_alu_res,	// \\src\\main\\scala\\cpu\\tool.scala:279:14
                io_mem_addr	// \\src\\main\\scala\\cpu\\tool.scala:279:14
);

  wire [31:0] _add_w_res_T = io_src1 + io_src2;	// \\src\\main\\scala\\cpu\\tool.scala:288:27
  wire [31:0] _io_alu_res_T_25 = io_src1 | io_src2;	// \\src\\main\\scala\\cpu\\tool.scala:292:27
  wire [62:0] slli_w = {{31{io_src1[31]}}, io_src1} << io_src2[4:0];	// \\src\\main\\scala\\cpu\\tool.scala:287:20, :288:27, :297:24
  wire [31:0] _GEN = {27'h0, io_src2[4:0]};	// \\src\\main\\scala\\cpu\\tool.scala:287:20, :298:32
  wire [63:0] mul_64 =
    io_mul_op[0]
      ? {{32{io_src1[31]}}, io_src1} * {{32{io_src2[31]}}, io_src2}
      : {32'h0, io_src1} * {32'h0, io_src2};	// \\src\\main\\scala\\cpu\\tool.scala:288:27, :301:30, :302:39, :303:{19,29}
  assign io_alu_res =
    (io_alu_op[0] ? (io_mul_op[1] ? mul_64[63:32] : mul_64[31:0]) : 32'h0)
    | (io_alu_op[1] ? $signed($signed(io_src1) >>> _GEN) : 32'h0)
    | (io_alu_op[2] ? io_src1 >> _GEN : 32'h0) | (io_alu_op[3] ? slli_w[31:0] : 32'h0)
    | (io_alu_op[4] ? io_src2 : 32'h0) | (io_alu_op[5] ? io_src1 ^ io_src2 : 32'h0)
    | (io_alu_op[6] ? _io_alu_res_T_25 : 32'h0)
    | (io_alu_op[7] ? io_src1 & io_src2 : 32'h0)
    | (io_alu_op[8] ? ~_io_alu_res_T_25 : 32'h0)
    | (io_alu_op[9] ? {31'h0, io_src1 < io_src2} : 32'h0)
    | (io_alu_op[10] ? {31'h0, $signed(io_src1) < $signed(io_src2)} : 32'h0)
    | (io_alu_op[11] ? io_src1 - io_src2 : 32'h0)
    | (io_alu_op[12] ? _add_w_res_T : 32'h0);	// \\src\\main\\scala\\cpu\\tool.scala:278:7, :288:27, :289:27, :290:29, :291:37, :292:{17,27}, :293:25, :295:25, :297:24, :298:32, :299:24, :302:39, :303:19, :304:{20,30,40,61}, src/main/scala/chisel3/util/Mux.scala:30:73, :32:36
  assign io_mem_addr = _add_w_res_T;	// \\src\\main\\scala\\cpu\\tool.scala:278:7, :288:27
endmodule

// external module div_sign

// external module div_unsign

module EXE_stage(	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
  input         clock,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
                reset,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
                io_pre_valid,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  output        io_ready,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
                io_valid,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  input  [31:0] io_src1,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
                io_src2,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
                io_rf_data2,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  input  [12:0] io_alu_op,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  input  [1:0]  io_mul_op,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  input  [2:0]  io_div_op,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  output        io_need_divmodule,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  input         io_mem_we_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  output        io_mem_we_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  output [1:0]  io_mem_byte_addr,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  input  [2:0]  io_mem_pattern_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  output [2:0]  io_mem_pattern_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  input         io_wb_from_mem_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  output        io_wb_from_mem_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  input         io_rf_we_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  output        io_rf_we_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  output [31:0] io_alu_res,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
                io_mem_addr,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
                io_mem_data,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  input  [4:0]  io_wb_addr_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  output [4:0]  io_wb_addr_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  input  [31:0] io_pc_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
  output [31:0] io_pc_out	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:179:14
);

  wire        ready;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:295:40
  wire        _div_unsign_s_axis_divisor_tready;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:273:26
  wire        _div_unsign_s_axis_dividend_tready;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:273:26
  wire [63:0] _div_unsign_m_axis_dout_tdata;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:273:26
  wire        _div_unsign_m_axis_dout_tvalid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:273:26
  wire        _div_sign_s_axis_divisor_tready;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:24
  wire        _div_sign_s_axis_dividend_tready;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:24
  wire [63:0] _div_sign_m_axis_dout_tdata;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:24
  wire        _div_sign_m_axis_dout_tvalid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:24
  wire [31:0] _alu_io_alu_res;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:259:19
  wire [31:0] _alu_io_mem_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:259:19
  reg         valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:210:22
  reg  [31:0] pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:211:19
  reg  [4:0]  wb_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:212:24
  reg  [31:0] src1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:213:21
  reg  [31:0] src2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:214:21
  reg  [12:0] alu_op;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:215:23
  reg  [1:0]  mul_op;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:216:23
  reg  [2:0]  div_op;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:217:23
  reg         mem_we;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:219:23
  reg  [2:0]  mem_pattern;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:220:28
  reg         wb_from_mem;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:221:28
  reg         rf_we;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:222:22
  reg  [31:0] rf_data2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:223:25
  reg         div_sign_ready;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:225:31
  reg         div_unsign_ready;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:226:33
  wire        _div_sign_io_s_axis_dividend_tvalid_T = div_op[2] & div_sign_ready;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:217:23, :225:31, :269:30, :279:52
  wire        _div_unsign_io_s_axis_dividend_tvalid_T = div_op[2] & div_unsign_ready;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:217:23, :226:33, :269:30, :287:55
  wire [63:0] divmod_res =
    div_op[0] ? _div_sign_m_axis_dout_tdata : _div_unsign_m_axis_dout_tdata;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:217:23, :271:30, :272:24, :273:26, :291:23
  wire        div_res_valid =
    div_op[0] ? _div_sign_m_axis_dout_tvalid : _div_unsign_m_axis_dout_tvalid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:217:23, :271:30, :272:24, :273:26, :294:26
  assign ready = div_op[2] & div_res_valid | ~(div_op[2]);	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:217:23, :269:30, :294:26, :295:{25,40,42}
  always @(posedge clock) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
    if (reset) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
      valid <= 1'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:210:22, :213:21
      pc <= 32'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:211:19
      wb_addr <= 5'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:212:24
      src1 <= 32'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:211:19, :213:21
      src2 <= 32'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:211:19, :214:21
      alu_op <= 13'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:215:23
      mul_op <= 2'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:216:23
      div_op <= 3'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :217:23
      mem_we <= 1'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:213:21, :219:23
      mem_pattern <= 3'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :220:28
      wb_from_mem <= 1'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:213:21, :221:28
      rf_we <= 1'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:213:21, :222:22
      rf_data2 <= 32'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:211:19, :223:25
      div_sign_ready <= 1'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:213:21, :225:31
      div_unsign_ready <= 1'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:213:21, :226:33
    end
    else begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
      automatic logic _GEN = io_pre_valid & ready;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:227:20, :295:40
      valid <= _GEN | ~(valid & ~(div_op[2])) & valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:210:22, :217:23, :227:{20,31}, :228:11, :245:{34,37,44,49}, :246:11
      if (_GEN) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:227:20
        pc <= io_pc_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:211:19
        wb_addr <= io_wb_addr_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:212:24
        src1 <= io_src1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:213:21
        src2 <= io_src2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:214:21
        alu_op <= io_alu_op;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:215:23
        mul_op <= io_mul_op;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:216:23
        div_op <= io_div_op;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:217:23
        mem_we <= io_mem_we_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:219:23
        mem_pattern <= io_mem_pattern_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:220:28
        wb_from_mem <= io_wb_from_mem_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:221:28
        rf_we <= io_rf_we_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:222:22
        rf_data2 <= io_rf_data2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:223:25
      end
      div_sign_ready <=
        ~(div_op[2] & _div_sign_s_axis_dividend_tready & _div_sign_s_axis_divisor_tready)
        & (_GEN | div_sign_ready);	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:217:23, :225:31, :227:{20,31}, :243:22, :269:30, :272:24, :278:{57,93,108}
      div_unsign_ready <=
        ~(div_op[2] & _div_unsign_s_axis_dividend_tready
          & _div_unsign_s_axis_divisor_tready) & (_GEN | div_unsign_ready);	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:217:23, :226:33, :227:{20,31}, :244:22, :269:30, :273:26, :286:{59,96,113}
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
    `ifdef FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
      `FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
      automatic logic [31:0] _RANDOM[0:4];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
      `ifdef INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
        `INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
        end	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
        valid = _RANDOM[3'h0][0];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :210:22
        pc = {_RANDOM[3'h0][31:1], _RANDOM[3'h1][0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :210:22, :211:19
        wb_addr = _RANDOM[3'h1][5:1];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :211:19, :212:24
        src1 = {_RANDOM[3'h1][31:6], _RANDOM[3'h2][5:0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :211:19, :213:21
        src2 = {_RANDOM[3'h2][31:6], _RANDOM[3'h3][5:0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :213:21, :214:21
        alu_op = _RANDOM[3'h3][18:6];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :214:21, :215:23
        mul_op = _RANDOM[3'h3][20:19];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :214:21, :216:23
        div_op = _RANDOM[3'h3][23:21];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :214:21, :217:23
        mem_we = _RANDOM[3'h3][24];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :214:21, :219:23
        mem_pattern = _RANDOM[3'h3][27:25];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :214:21, :220:28
        wb_from_mem = _RANDOM[3'h3][28];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :214:21, :221:28
        rf_we = _RANDOM[3'h3][29];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :214:21, :222:22
        rf_data2 = {_RANDOM[3'h3][31:30], _RANDOM[3'h4][29:0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :214:21, :223:25
        div_sign_ready = _RANDOM[3'h4][30];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :223:25, :225:31
        div_unsign_ready = _RANDOM[3'h4][31];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :223:25, :226:33
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
      `FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ALU alu (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:259:19
    .io_alu_op   (alu_op),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:215:23
    .io_mul_op   (mul_op),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:216:23
    .io_src1     (src1),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:213:21
    .io_src2     (src2),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:214:21
    .io_alu_res  (_alu_io_alu_res),
    .io_mem_addr (_alu_io_mem_addr)
  );
  div_sign div_sign (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:24
    .aclk                   (clock),
    .s_axis_divisor_tdata   (src2),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:214:21
    .s_axis_dividend_tdata  (src1),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:213:21
    .s_axis_divisor_tvalid  (_div_sign_io_s_axis_dividend_tvalid_T),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:279:52
    .s_axis_dividend_tvalid (_div_sign_io_s_axis_dividend_tvalid_T),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:279:52
    .s_axis_divisor_tready  (_div_sign_s_axis_divisor_tready),
    .s_axis_dividend_tready (_div_sign_s_axis_dividend_tready),
    .m_axis_dout_tdata      (_div_sign_m_axis_dout_tdata),
    .m_axis_dout_tvalid     (_div_sign_m_axis_dout_tvalid)
  );
  div_unsign div_unsign (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:273:26
    .aclk                   (clock),
    .s_axis_divisor_tdata   (src2),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:214:21
    .s_axis_dividend_tdata  (src1),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:213:21
    .s_axis_divisor_tvalid  (_div_unsign_io_s_axis_dividend_tvalid_T),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:287:55
    .s_axis_dividend_tvalid (_div_unsign_io_s_axis_dividend_tvalid_T),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:287:55
    .s_axis_divisor_tready  (_div_unsign_s_axis_divisor_tready),
    .s_axis_dividend_tready (_div_unsign_s_axis_dividend_tready),
    .m_axis_dout_tdata      (_div_unsign_m_axis_dout_tdata),
    .m_axis_dout_tvalid     (_div_unsign_m_axis_dout_tvalid)
  );
  assign io_ready = ready;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :295:40
  assign io_valid = valid & ready;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :210:22, :249:20, :295:40
  assign io_need_divmodule = div_op[2] & ~div_res_valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :217:23, :269:30, :294:26, :296:{36,38}
  assign io_mem_we_out = mem_we & valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :210:22, :219:23, :254:27
  assign io_mem_byte_addr = _alu_io_mem_addr[1:0];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :259:19, :265:36
  assign io_mem_pattern_out = mem_pattern;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :220:28
  assign io_wb_from_mem_out = wb_from_mem;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :221:28
  assign io_rf_we_out = rf_we & valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :210:22, :222:22, :257:25
  assign io_alu_res =
    div_op[2] ? (div_op[1] ? divmod_res[63:32] : divmod_res[31:0]) : _alu_io_alu_res;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :217:23, :259:19, :269:30, :270:30, :291:23, :292:{20,42,67}, :293:20
  assign io_mem_addr = _alu_io_mem_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :259:19
  assign io_mem_data = rf_data2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :223:25
  assign io_wb_addr_out = wb_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :212:24
  assign io_pc_out = pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:7, :211:19
endmodule

module MEM_stage(	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
  input         clock,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
                reset,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
                io_pre_valid,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:300:14
  output        io_valid,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:300:14
  input  [31:0] io_alu_res,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:300:14
  output [31:0] io_wb_data,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:300:14
  input  [1:0]  io_mem_byte_addr,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:300:14
  input  [2:0]  io_mem_pattern_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:300:14
  input         io_wb_from_mem,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:300:14
  input  [31:0] io_mem_value,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:300:14
  input         io_rf_we_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:300:14
  output        io_rf_we_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:300:14
  input  [4:0]  io_wb_addr_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:300:14
  output [4:0]  io_wb_addr_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:300:14
  input  [31:0] io_pc_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:300:14
  output [31:0] io_pc_out	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:300:14
);

  reg         valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:319:22
  reg  [31:0] pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:320:19
  reg  [4:0]  wb_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:321:24
  reg  [31:0] alu_res;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:322:24
  reg  [1:0]  mem_byte_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:323:30
  reg  [2:0]  mem_pattern;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:324:28
  reg         rf_we;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:325:22
  reg         wb_from_mem;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:326:28
  wire [7:0]  byte_0 =
    mem_byte_addr[1]
      ? (mem_byte_addr[0] ? io_mem_value[31:24] : io_mem_value[23:16])
      : mem_byte_addr[0] ? io_mem_value[15:8] : io_mem_value[7:0];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:323:30, :347:{17,31,38,52,68,88}, :348:{38,68,87}
  wire [15:0] halfword = mem_byte_addr[1] ? io_mem_value[31:16] : io_mem_value[15:0];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:323:30, :347:31, :349:{21,51,71}
  wire [11:0] _GEN = mem_pattern[0] ? {12{halfword[15]}} : 12'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:324:28, :346:27, :349:21, :351:{24,52}
  always @(posedge clock) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
    if (reset) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
      valid <= 1'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:319:22, :322:24
      pc <= 32'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:320:19
      wb_addr <= 5'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:321:24
      alu_res <= 32'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:320:19, :322:24
      mem_byte_addr <= 2'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7, :323:30
      mem_pattern <= 3'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:324:28
      rf_we <= 1'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:322:24, :325:22
      wb_from_mem <= 1'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:322:24, :326:28
    end
    else begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
      valid <= io_pre_valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:319:22
      if (io_pre_valid) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:300:14
        pc <= io_pc_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:320:19
        wb_addr <= io_wb_addr_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:321:24
        alu_res <= io_alu_res;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:322:24
        mem_byte_addr <= io_mem_byte_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:323:30
        mem_pattern <= io_mem_pattern_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:324:28
        rf_we <= io_rf_we_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:325:22
        wb_from_mem <= io_wb_from_mem;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:326:28
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
    `ifdef FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
      `FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
      automatic logic [31:0] _RANDOM[0:2];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
      `ifdef INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
        `INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
        end	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
        valid = _RANDOM[2'h0][0];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7, :319:22
        pc = {_RANDOM[2'h0][31:1], _RANDOM[2'h1][0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7, :319:22, :320:19
        wb_addr = _RANDOM[2'h1][5:1];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7, :320:19, :321:24
        alu_res = {_RANDOM[2'h1][31:6], _RANDOM[2'h2][5:0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7, :320:19, :322:24
        mem_byte_addr = _RANDOM[2'h2][7:6];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7, :322:24, :323:30
        mem_pattern = _RANDOM[2'h2][10:8];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7, :322:24, :324:28
        rf_we = _RANDOM[2'h2][11];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7, :322:24, :325:22
        wb_from_mem = _RANDOM[2'h2][12];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7, :322:24, :326:28
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
      `FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_valid = valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7, :319:22
  assign io_wb_data =
    wb_from_mem
      ? (mem_pattern[2]
           ? io_mem_value
           : mem_pattern[1]
               ? {mem_pattern[0] ? {24{byte_0[7]}} : 24'h0, byte_0}
               : {{4{_GEN[11]}}, _GEN, halfword})
      : alu_res;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7, :322:24, :324:28, :326:28, :344:27, :345:27, :346:27, :347:17, :349:21, :350:{21,45}, :351:24, :352:20, :353:20, :354:20
  assign io_rf_we_out = rf_we & valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7, :319:22, :325:22, :342:25
  assign io_wb_addr_out = wb_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7, :321:24
  assign io_pc_out = pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:299:7, :320:19
endmodule

module WB_stage(	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
  input         clock,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
                reset,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
                io_pre_valid,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:358:14
  input  [31:0] io_wb_data_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:358:14
  output [31:0] io_wb_data_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:358:14
  input         io_rf_we_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:358:14
  output        io_rf_we_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:358:14
  input  [4:0]  io_wb_addr_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:358:14
  output [4:0]  io_wb_addr_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:358:14
  input  [31:0] io_pc_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:358:14
  output [31:0] io_pc_out	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:358:14
);

  reg        valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:373:22
  reg [31:0] pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:374:19
  reg [31:0] wb_data;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:375:24
  reg [31:0] wb_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:376:24
  reg        rf_we;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:377:22
  always @(posedge clock) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
    if (reset) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
      valid <= 1'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:373:22, :375:24
      pc <= 32'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:374:19
      wb_data <= 32'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:374:19, :375:24
      wb_addr <= 32'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:374:19, :376:24
      rf_we <= 1'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:375:24, :377:22
    end
    else begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
      valid <= io_pre_valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:373:22
      if (io_pre_valid) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:358:14
        pc <= io_pc_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:374:19
        wb_data <= io_wb_data_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:375:24
        wb_addr <= {27'h0, io_wb_addr_in};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:376:24, :382:13
        rf_we <= io_rf_we_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:377:22
      end
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
    `ifdef FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
      `FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
      automatic logic [31:0] _RANDOM[0:3];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
      `ifdef INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
        `INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
        end	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
        valid = _RANDOM[2'h0][0];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7, :373:22
        pc = {_RANDOM[2'h0][31:1], _RANDOM[2'h1][0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7, :373:22, :374:19
        wb_data = {_RANDOM[2'h1][31:1], _RANDOM[2'h2][0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7, :374:19, :375:24
        wb_addr = {_RANDOM[2'h2][31:1], _RANDOM[2'h3][0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7, :375:24, :376:24
        rf_we = _RANDOM[2'h3][1];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7, :376:24, :377:22
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
      `FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_wb_data_out = wb_data;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7, :375:24
  assign io_rf_we_out = rf_we & valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7, :373:22, :377:22, :392:24
  assign io_wb_addr_out = wb_addr[4:0];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7, :376:24, :391:18
  assign io_pc_out = pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:357:7, :374:19
endmodule

module Block_Judge(	// \\src\\main\\scala\\cpu\\tool.scala:351:7
  input         io_need_rf_raddr1,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
                io_need_rf_raddr2,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
  input  [4:0]  io_rf_raddr1,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
  input  [31:0] io_rf_rdata1,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
  input  [4:0]  io_rf_raddr2,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
  input  [31:0] io_rf_rdata2,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
  input         io_exe_wb_from_mem,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
                io_exe_rf_we,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
  input  [4:0]  io_exe_rf_waddr,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
  input  [31:0] io_exe_alu_res,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
  input         io_mem_rf_we,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
  input  [4:0]  io_mem_rf_waddr,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
  input  [31:0] io_mem_wb_data,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
  input         io_wb_rf_we,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
  input  [4:0]  io_wb_rf_waddr,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
  input  [31:0] io_wb_wb_data,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
  output [31:0] io_forward_rf_rdata1,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
                io_forward_rf_rdata2,	// \\src\\main\\scala\\cpu\\tool.scala:352:14
  output        io_needBlock	// \\src\\main\\scala\\cpu\\tool.scala:352:14
);

  wire _GEN = io_exe_rf_we & io_rf_raddr1 == io_exe_rf_waddr;	// \\src\\main\\scala\\cpu\\tool.scala:377:{24,39}
  wire _GEN_0 = io_exe_rf_we & io_rf_raddr2 == io_exe_rf_waddr;	// \\src\\main\\scala\\cpu\\tool.scala:403:{24,39}
  assign io_forward_rf_rdata1 =
    io_need_rf_raddr1 & (|io_rf_raddr1)
      ? (_GEN
           ? (io_exe_wb_from_mem ? io_rf_rdata1 : io_exe_alu_res)
           : io_mem_rf_we & io_rf_raddr1 == io_mem_rf_waddr
               ? io_mem_wb_data
               : io_wb_rf_we & io_rf_raddr1 == io_wb_rf_waddr
                   ? io_wb_wb_data
                   : io_rf_rdata1)
      : io_rf_rdata1;	// \\src\\main\\scala\\cpu\\tool.scala:351:7, :375:26, :376:{22,29}, :377:{24,59}, :378:36, :380:33, :383:33, :385:{30,45,65}, :387:29, :388:{29,44,63}, :390:29, :392:29, :395:27, :398:25
  assign io_forward_rf_rdata2 =
    io_need_rf_raddr2 & (|io_rf_raddr2)
      ? (_GEN_0
           ? (io_exe_wb_from_mem ? io_rf_rdata2 : io_exe_alu_res)
           : io_mem_rf_we & io_rf_raddr2 == io_mem_rf_waddr
               ? io_mem_wb_data
               : io_wb_rf_we & io_rf_raddr2 == io_wb_rf_waddr
                   ? io_wb_wb_data
                   : io_rf_rdata2)
      : io_rf_rdata2;	// \\src\\main\\scala\\cpu\\tool.scala:351:7, :401:26, :402:{22,29}, :403:{24,59}, :404:36, :406:33, :409:33, :411:{30,45,65}, :413:29, :414:{29,44,63}, :416:29, :418:29, :421:27, :424:25
  assign io_needBlock =
    io_need_rf_raddr1 & (|io_rf_raddr1) & _GEN & io_exe_wb_from_mem | io_need_rf_raddr2
    & (|io_rf_raddr2) & _GEN_0 & io_exe_wb_from_mem;	// \\src\\main\\scala\\cpu\\tool.scala:351:7, :375:26, :376:{22,29}, :377:{24,59}, :378:36, :385:65, :396:16, :399:14, :401:26, :402:{22,29}, :403:{24,59}, :404:36, :411:65, :422:16, :425:14, :426:26
endmodule

module minicpu_top_pipline(	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:395:7
  input         clock,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:395:7
                reset,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:395:7
  output        io_inst_sram_en,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:396:14
  output [3:0]  io_inst_sram_we,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:396:14
  output [31:0] io_inst_sram_addr,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:396:14
                io_inst_sram_wdata,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:396:14
  input  [31:0] io_inst_sram_rdata,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:396:14
  output        io_data_sram_en,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:396:14
  output [3:0]  io_data_sram_we,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:396:14
  output [31:0] io_data_sram_addr,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:396:14
                io_data_sram_wdata,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:396:14
  input  [31:0] io_data_sram_rdata,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:396:14
  output [31:0] io_debug_wb_pc,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:396:14
  output [3:0]  io_debug_wb_rf_we,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:396:14
  output [4:0]  io_debug_wb_rf_wnum,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:396:14
  output [31:0] io_debug_wb_rf_wdata	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:396:14
);

  wire [31:0] _block_judge_io_forward_rf_rdata1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:526:27
  wire [31:0] _block_judge_io_forward_rf_rdata2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:526:27
  wire        _block_judge_io_needBlock;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:526:27
  wire [31:0] _wb_stage_io_wb_data_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:496:24
  wire        _wb_stage_io_rf_we_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:496:24
  wire [4:0]  _wb_stage_io_wb_addr_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:496:24
  wire        _mem_stage_io_valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:457:25
  wire [31:0] _mem_stage_io_wb_data;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:457:25
  wire        _mem_stage_io_rf_we_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:457:25
  wire [4:0]  _mem_stage_io_wb_addr_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:457:25
  wire [31:0] _mem_stage_io_pc_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:457:25
  wire        _exe_stage_io_ready;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
  wire        _exe_stage_io_valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
  wire        _exe_stage_io_need_divmodule;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
  wire        _exe_stage_io_mem_we_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
  wire [1:0]  _exe_stage_io_mem_byte_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
  wire [2:0]  _exe_stage_io_mem_pattern_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
  wire        _exe_stage_io_wb_from_mem_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
  wire        _exe_stage_io_rf_we_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
  wire [31:0] _exe_stage_io_alu_res;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
  wire [31:0] _exe_stage_io_mem_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
  wire [31:0] _exe_stage_io_mem_data;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
  wire [4:0]  _exe_stage_io_wb_addr_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
  wire [31:0] _exe_stage_io_pc_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
  wire        _id_stage_io_valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire [4:0]  _id_stage_io_wb_addr_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire        _id_stage_io_rf_we_ID;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire [12:0] _id_stage_io_alu_op;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire [1:0]  _id_stage_io_mul_op;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire [2:0]  _id_stage_io_div_op;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire        _id_stage_io_mem_we;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire [2:0]  _id_stage_io_mem_pattern;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire        _id_stage_io_wb_from_mem;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire        _id_stage_io_br_taken;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire        _id_stage_io_base_pc_from_rj;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire [31:0] _id_stage_io_pc_offs;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire [31:0] _id_stage_io_src1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire [31:0] _id_stage_io_src2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire [31:0] _id_stage_io_to_forward_rf_data1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire [31:0] _id_stage_io_to_forward_rf_data2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire [31:0] _id_stage_io_rf_data1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire [31:0] _id_stage_io_rf_data2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire [31:0] _id_stage_io_pc_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire        _id_stage_io_need_rf_raddr1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire        _id_stage_io_need_rf_raddr2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire [4:0]  _id_stage_io_rf_raddr1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire [4:0]  _id_stage_io_rf_raddr2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
  wire        _if_stage_io_valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:418:24
  wire [31:0] _if_stage_io_inst;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:418:24
  wire [31:0] _if_stage_io_pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:418:24
  wire [31:0] _pre_if_io_nextpc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:414:22
  wire        _id_stage_io_needBlock_T =
    _block_judge_io_needBlock | _exe_stage_io_need_divmodule;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25, :526:27, :545:50
  pre_IF pre_if (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:414:22
    .io_offs_ext        (_id_stage_io_pc_offs),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_gr_rj           (_id_stage_io_rf_data1),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_pc              (_id_stage_io_pc_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_base_pc_from_rj (_id_stage_io_base_pc_from_rj),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_nextpc          (_pre_if_io_nextpc)
  );
  IF_stage if_stage (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:418:24
    .clock              (clock),
    .reset              (reset),
    .io_valid           (_if_stage_io_valid),
    .io_needBlock       (_id_stage_io_needBlock_T),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:545:50
    .io_br_taken        (_id_stage_io_br_taken),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_nextpc          (_pre_if_io_nextpc),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:414:22
    .io_inst_sram_rdata (io_inst_sram_rdata),
    .io_inst            (_if_stage_io_inst),
    .io_inst_sram_addr  (io_inst_sram_addr),
    .io_pc              (_if_stage_io_pc)
  );
  ID_stage id_stage (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .clock                  (clock),
    .reset                  (reset),
    .io_pre_valid           (_if_stage_io_valid),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:418:24
    .io_next_ready          (_exe_stage_io_ready),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
    .io_valid               (_id_stage_io_valid),
    .io_inst                (_if_stage_io_inst),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:418:24
    .io_pc_in               (_if_stage_io_pc),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:418:24
    .io_forward_rf_rdata1   (_block_judge_io_forward_rf_rdata1),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:526:27
    .io_forward_rf_rdata2   (_block_judge_io_forward_rf_rdata2),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:526:27
    .io_rf_we_WB            (_wb_stage_io_rf_we_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:496:24
    .io_wb_data             (_wb_stage_io_wb_data_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:496:24
    .io_wb_addr_in          (_wb_stage_io_wb_addr_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:496:24
    .io_wb_addr_out         (_id_stage_io_wb_addr_out),
    .io_rf_we_ID            (_id_stage_io_rf_we_ID),
    .io_alu_op              (_id_stage_io_alu_op),
    .io_mul_op              (_id_stage_io_mul_op),
    .io_div_op              (_id_stage_io_div_op),
    .io_mem_we              (_id_stage_io_mem_we),
    .io_mem_pattern         (_id_stage_io_mem_pattern),
    .io_wb_from_mem         (_id_stage_io_wb_from_mem),
    .io_br_taken            (_id_stage_io_br_taken),
    .io_base_pc_from_rj     (_id_stage_io_base_pc_from_rj),
    .io_pc_offs             (_id_stage_io_pc_offs),
    .io_src1                (_id_stage_io_src1),
    .io_src2                (_id_stage_io_src2),
    .io_to_forward_rf_data1 (_id_stage_io_to_forward_rf_data1),
    .io_to_forward_rf_data2 (_id_stage_io_to_forward_rf_data2),
    .io_rf_data1            (_id_stage_io_rf_data1),
    .io_rf_data2            (_id_stage_io_rf_data2),
    .io_pc_out              (_id_stage_io_pc_out),
    .io_need_rf_raddr1      (_id_stage_io_need_rf_raddr1),
    .io_need_rf_raddr2      (_id_stage_io_need_rf_raddr2),
    .io_rf_raddr1           (_id_stage_io_rf_raddr1),
    .io_rf_raddr2           (_id_stage_io_rf_raddr2),
    .io_needBlock           (_id_stage_io_needBlock_T)	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:545:50
  );
  EXE_stage exe_stage (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
    .clock              (clock),
    .reset              (reset),
    .io_pre_valid       (_id_stage_io_valid),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_ready           (_exe_stage_io_ready),
    .io_valid           (_exe_stage_io_valid),
    .io_src1            (_id_stage_io_src1),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_src2            (_id_stage_io_src2),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_rf_data2        (_id_stage_io_rf_data2),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_alu_op          (_id_stage_io_alu_op),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_mul_op          (_id_stage_io_mul_op),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_div_op          (_id_stage_io_div_op),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_need_divmodule  (_exe_stage_io_need_divmodule),
    .io_mem_we_in       (_id_stage_io_mem_we),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_mem_we_out      (_exe_stage_io_mem_we_out),
    .io_mem_byte_addr   (_exe_stage_io_mem_byte_addr),
    .io_mem_pattern_in  (_id_stage_io_mem_pattern),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_mem_pattern_out (_exe_stage_io_mem_pattern_out),
    .io_wb_from_mem_in  (_id_stage_io_wb_from_mem),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_wb_from_mem_out (_exe_stage_io_wb_from_mem_out),
    .io_rf_we_in        (_id_stage_io_rf_we_ID),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_rf_we_out       (_exe_stage_io_rf_we_out),
    .io_alu_res         (_exe_stage_io_alu_res),
    .io_mem_addr        (_exe_stage_io_mem_addr),
    .io_mem_data        (_exe_stage_io_mem_data),
    .io_wb_addr_in      (_id_stage_io_wb_addr_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_wb_addr_out     (_exe_stage_io_wb_addr_out),
    .io_pc_in           (_id_stage_io_pc_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_pc_out          (_exe_stage_io_pc_out)
  );
  MEM_stage mem_stage (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:457:25
    .clock             (clock),
    .reset             (reset),
    .io_pre_valid      (_exe_stage_io_valid),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
    .io_valid          (_mem_stage_io_valid),
    .io_alu_res        (_exe_stage_io_alu_res),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
    .io_wb_data        (_mem_stage_io_wb_data),
    .io_mem_byte_addr  (_exe_stage_io_mem_byte_addr),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
    .io_mem_pattern_in (_exe_stage_io_mem_pattern_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
    .io_wb_from_mem    (_exe_stage_io_wb_from_mem_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
    .io_mem_value      (io_data_sram_rdata),
    .io_rf_we_in       (_exe_stage_io_rf_we_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
    .io_rf_we_out      (_mem_stage_io_rf_we_out),
    .io_wb_addr_in     (_exe_stage_io_wb_addr_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
    .io_wb_addr_out    (_mem_stage_io_wb_addr_out),
    .io_pc_in          (_exe_stage_io_pc_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
    .io_pc_out         (_mem_stage_io_pc_out)
  );
  WB_stage wb_stage (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:496:24
    .clock          (clock),
    .reset          (reset),
    .io_pre_valid   (_mem_stage_io_valid),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:457:25
    .io_wb_data_in  (_mem_stage_io_wb_data),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:457:25
    .io_wb_data_out (_wb_stage_io_wb_data_out),
    .io_rf_we_in    (_mem_stage_io_rf_we_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:457:25
    .io_rf_we_out   (_wb_stage_io_rf_we_out),
    .io_wb_addr_in  (_mem_stage_io_wb_addr_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:457:25
    .io_wb_addr_out (_wb_stage_io_wb_addr_out),
    .io_pc_in       (_mem_stage_io_pc_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:457:25
    .io_pc_out      (io_debug_wb_pc)
  );
  Block_Judge block_judge (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:526:27
    .io_need_rf_raddr1    (_id_stage_io_need_rf_raddr1),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_need_rf_raddr2    (_id_stage_io_need_rf_raddr2),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_rf_raddr1         (_id_stage_io_rf_raddr1),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_rf_rdata1         (_id_stage_io_to_forward_rf_data1),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_rf_raddr2         (_id_stage_io_rf_raddr2),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_rf_rdata2         (_id_stage_io_to_forward_rf_data2),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:428:24
    .io_exe_wb_from_mem   (_exe_stage_io_wb_from_mem_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
    .io_exe_rf_we         (_exe_stage_io_rf_we_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
    .io_exe_rf_waddr      (_exe_stage_io_wb_addr_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
    .io_exe_alu_res       (_exe_stage_io_alu_res),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:440:25
    .io_mem_rf_we         (_mem_stage_io_rf_we_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:457:25
    .io_mem_rf_waddr      (_mem_stage_io_wb_addr_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:457:25
    .io_mem_wb_data       (_mem_stage_io_wb_data),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:457:25
    .io_wb_rf_we          (_wb_stage_io_rf_we_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:496:24
    .io_wb_rf_waddr       (_wb_stage_io_wb_addr_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:496:24
    .io_wb_wb_data        (_wb_stage_io_wb_data_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:496:24
    .io_forward_rf_rdata1 (_block_judge_io_forward_rf_rdata1),
    .io_forward_rf_rdata2 (_block_judge_io_forward_rf_rdata2),
    .io_needBlock         (_block_judge_io_needBlock)
  );
  assign io_inst_sram_en = 1'h1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:395:7, :420:19
  assign io_inst_sram_we = 4'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:395:7, :421:19
  assign io_inst_sram_wdata = 32'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:395:7, :423:22
  assign io_data_sram_en = 1'h1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:395:7, :420:19
  assign io_data_sram_we =
    _exe_stage_io_mem_we_out
      ? (_exe_stage_io_mem_pattern_out[2]
           ? 4'hF
           : _exe_stage_io_mem_pattern_out[1]
               ? (_exe_stage_io_mem_addr[1]
                    ? (_exe_stage_io_mem_addr[0] ? 4'h8 : 4'h4)
                    : {2'h0, _exe_stage_io_mem_addr[0] ? 2'h2 : 2'h1})
               : _exe_stage_io_mem_addr[1] ? 4'hC : 4'h3)
      : 4'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:395:7, :421:19, :440:25, :465:46, :466:45, :467:40, :473:32, :474:19, :475:19, :476:24, :477:{19,24,34,41,51}, :478:41, :480:{19,24,34}, :483:17
  assign io_data_sram_addr = _exe_stage_io_mem_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:395:7, :440:25
  assign io_data_sram_wdata =
    _exe_stage_io_mem_pattern_out[2]
      ? _exe_stage_io_mem_data
      : _exe_stage_io_mem_pattern_out[1]
          ? {4{_exe_stage_io_mem_data[7:0]}}
          : {2{_exe_stage_io_mem_data[15:0]}};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:395:7, :440:25, :465:46, :466:45, :469:20, :470:{33,45,53}, :471:{38,46}
  assign io_debug_wb_rf_we = {2{{2{_wb_stage_io_rf_we_out}}}};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:395:7, :496:24, :508:27
  assign io_debug_wb_rf_wnum = _wb_stage_io_wb_addr_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:395:7, :496:24
  assign io_debug_wb_rf_wdata = _wb_stage_io_wb_data_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:395:7, :496:24
endmodule

