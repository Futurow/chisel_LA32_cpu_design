// Generated by CIRCT firtool-1.62.1
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module pre_IF(	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
  input         clock,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
                reset,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
  input  [31:0] io_offs_ext,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:4:14
                io_gr_rj,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:4:14
                io_pc,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:4:14
  input         io_base_pc_add_offs,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:4:14
                io_base_pc_from_rj,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:4:14
  output [31:0] io_nextpc	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:4:14
);

  reg valid;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:12:18
  always @(posedge clock)	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
    valid <= reset;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:12:18
  `ifdef ENABLE_INITIAL_REG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
    `ifdef FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
      `FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
      automatic logic [31:0] _RANDOM[0:0];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
      `ifdef INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
        `INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
        valid = _RANDOM[/*Zero width*/ 1'b0][0];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7, :12:18
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
      `FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_nextpc =
    valid & ~reset
      ? 32'h1C000000
      : (io_base_pc_add_offs ? io_offs_ext : 32'h4)
        + (io_base_pc_from_rj ? io_gr_rj : io_pc);	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:3:7, :12:18, :16:24, :17:24, :18:29, :19:{19,26,30}
endmodule

module IF_stage(	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:21:7
  input  [31:0] io_nextpc,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:22:14
                io_inst_sram_rdata,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:22:14
  output [31:0] io_inst,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:22:14
                io_pc	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:22:14
);

  assign io_inst = io_inst_sram_rdata;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:21:7
  assign io_pc = io_nextpc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:21:7
endmodule

module N_2N_Decoder(	// \\src\\main\\scala\\cpu\\tool.scala:4:7
  input  [5:0]  io_in,	// \\src\\main\\scala\\cpu\\tool.scala:5:14
  output [63:0] io_out	// \\src\\main\\scala\\cpu\\tool.scala:5:14
);

  assign io_out = 64'h1 << io_in;	// \\src\\main\\scala\\cpu\\tool.scala:4:7, :10:17
endmodule

module N_2N_Decoder_1(	// \\src\\main\\scala\\cpu\\tool.scala:4:7
  input  [4:0]  io_in,	// \\src\\main\\scala\\cpu\\tool.scala:5:14
  output [31:0] io_out	// \\src\\main\\scala\\cpu\\tool.scala:5:14
);

  assign io_out = 32'h1 << io_in;	// \\src\\main\\scala\\cpu\\tool.scala:4:7, :10:17
endmodule

module N_2N_Decoder_2(	// \\src\\main\\scala\\cpu\\tool.scala:4:7
  input  [3:0]  io_in,	// \\src\\main\\scala\\cpu\\tool.scala:5:14
  output [15:0] io_out	// \\src\\main\\scala\\cpu\\tool.scala:5:14
);

  assign io_out = 16'h1 << io_in;	// \\src\\main\\scala\\cpu\\tool.scala:4:7, :10:17
endmodule

module N_2N_Decoder_3(	// \\src\\main\\scala\\cpu\\tool.scala:4:7
  input  [1:0] io_in,	// \\src\\main\\scala\\cpu\\tool.scala:5:14
  output [3:0] io_out	// \\src\\main\\scala\\cpu\\tool.scala:5:14
);

  assign io_out = 4'h1 << io_in;	// \\src\\main\\scala\\cpu\\tool.scala:4:7, :10:17
endmodule

module Inst_Frag_Decoder(	// \\src\\main\\scala\\cpu\\tool.scala:12:7
  input  [16:0] io_op,	// \\src\\main\\scala\\cpu\\tool.scala:26:14
  input         io_rj_eq_rd,	// \\src\\main\\scala\\cpu\\tool.scala:26:14
  output        io_cs_src_reg_is_rd,	// \\src\\main\\scala\\cpu\\tool.scala:26:14
                io_cs_w_addr_is_1,	// \\src\\main\\scala\\cpu\\tool.scala:26:14
                io_cs_rf_we,	// \\src\\main\\scala\\cpu\\tool.scala:26:14
  output [3:0]  io_cs_sel_src2,	// \\src\\main\\scala\\cpu\\tool.scala:26:14
  output        io_cs_src1_is_pc,	// \\src\\main\\scala\\cpu\\tool.scala:26:14
  output [11:0] io_cs_alu_op,	// \\src\\main\\scala\\cpu\\tool.scala:26:14
  output        io_cs_mem_we,	// \\src\\main\\scala\\cpu\\tool.scala:26:14
                io_cs_wb_from_mem,	// \\src\\main\\scala\\cpu\\tool.scala:26:14
                io_cs_sign_ext_offs26,	// \\src\\main\\scala\\cpu\\tool.scala:26:14
                io_cs_base_pc_add_offs,	// \\src\\main\\scala\\cpu\\tool.scala:26:14
                io_cs_base_pc_from_rj	// \\src\\main\\scala\\cpu\\tool.scala:26:14
);

  wire [3:0]  _Decoder2_4_io_out;	// \\src\\main\\scala\\cpu\\tool.scala:34:26
  wire [15:0] _Decoder4_16_io_out;	// \\src\\main\\scala\\cpu\\tool.scala:33:27
  wire [31:0] _Decoder5_32_io_out;	// \\src\\main\\scala\\cpu\\tool.scala:32:27
  wire [63:0] _Decoder6_64_io_out;	// \\src\\main\\scala\\cpu\\tool.scala:31:27
  wire        inst_add_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[0];	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :32:27, :33:27, :34:26, :44:{31,55,76,83,95}
  wire        inst_sub_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[2];	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :32:27, :33:27, :34:26, :44:{31,55,76}, :45:{83,95}
  wire        inst_slt =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[4];	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :32:27, :33:27, :34:26, :44:{31,55,76}, :46:{83,95}
  wire        inst_sltu =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[5];	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :32:27, :33:27, :34:26, :44:{31,55,76}, :47:{83,95}
  wire        inst_nor =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[8];	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :32:27, :33:27, :34:26, :44:{31,55,76}, :48:{83,95}
  wire        inst_and =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[9];	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :32:27, :33:27, :34:26, :44:{31,55,76}, :49:{83,95}
  wire        inst_or =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[10];	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :32:27, :33:27, :34:26, :44:{31,55,76}, :50:{83,95}
  wire        inst_xor =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[0] & _Decoder2_4_io_out[1]
    & _Decoder5_32_io_out[11];	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :32:27, :33:27, :34:26, :44:{31,55,76}, :51:{83,95}
  wire        inst_addi_w = _Decoder6_64_io_out[0] & _Decoder4_16_io_out[10];	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :33:27, :44:31, :52:{43,55}
  wire        inst_lu12i_w = _Decoder6_64_io_out[5] & ~(io_op[10]);	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :53:{31,43,46,52}
  wire        inst_slli_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[1] & _Decoder2_4_io_out[0]
    & _Decoder5_32_io_out[1];	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :32:27, :33:27, :34:26, :44:31, :55:{55,76,83,95}
  wire        inst_srli_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[1] & _Decoder2_4_io_out[0]
    & _Decoder5_32_io_out[9];	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :32:27, :33:27, :34:26, :44:31, :49:95, :55:{55,76}, :56:83
  wire        inst_srai_w =
    _Decoder6_64_io_out[0] & _Decoder4_16_io_out[1] & _Decoder2_4_io_out[0]
    & _Decoder5_32_io_out[17];	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :32:27, :33:27, :34:26, :44:31, :55:{55,76}, :57:{83,95}
  wire        inst_ld_w = _Decoder6_64_io_out[10] & _Decoder4_16_io_out[2];	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :33:27, :65:{29,41,53}
  wire        inst_st_w = _Decoder6_64_io_out[10] & _Decoder4_16_io_out[6];	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :33:27, :65:29, :66:{41,53}
  wire        _src2_is_R_data2_T = inst_add_w | inst_sub_w;	// \\src\\main\\scala\\cpu\\tool.scala:44:83, :45:83, :71:26
  wire        src2_is_4 = _Decoder6_64_io_out[19] | _Decoder6_64_io_out[21];	// \\src\\main\\scala\\cpu\\tool.scala:31:27, :59:29, :61:29, :76:28
  N_2N_Decoder Decoder6_64 (	// \\src\\main\\scala\\cpu\\tool.scala:31:27
    .io_in  (io_op[16:11]),	// \\src\\main\\scala\\cpu\\tool.scala:35:29
    .io_out (_Decoder6_64_io_out)
  );
  N_2N_Decoder_1 Decoder5_32 (	// \\src\\main\\scala\\cpu\\tool.scala:32:27
    .io_in  (io_op[4:0]),	// \\src\\main\\scala\\cpu\\tool.scala:38:29
    .io_out (_Decoder5_32_io_out)
  );
  N_2N_Decoder_2 Decoder4_16 (	// \\src\\main\\scala\\cpu\\tool.scala:33:27
    .io_in  (io_op[10:7]),	// \\src\\main\\scala\\cpu\\tool.scala:36:29
    .io_out (_Decoder4_16_io_out)
  );
  N_2N_Decoder_3 Decoder2_4 (	// \\src\\main\\scala\\cpu\\tool.scala:34:26
    .io_in  (io_op[6:5]),	// \\src\\main\\scala\\cpu\\tool.scala:37:28
    .io_out (_Decoder2_4_io_out)
  );
  assign io_cs_src_reg_is_rd =
    _Decoder6_64_io_out[22] | _Decoder6_64_io_out[23] | inst_st_w;	// \\src\\main\\scala\\cpu\\tool.scala:12:7, :31:27, :62:29, :63:29, :66:41, :68:46
  assign io_cs_w_addr_is_1 = _Decoder6_64_io_out[21];	// \\src\\main\\scala\\cpu\\tool.scala:12:7, :31:27, :61:29
  assign io_cs_rf_we =
    _src2_is_R_data2_T | inst_slt | inst_sltu | inst_nor | inst_and | inst_or | inst_xor
    | inst_addi_w | inst_lu12i_w | inst_slli_w | inst_srli_w | inst_srai_w
    | _Decoder6_64_io_out[19] | _Decoder6_64_io_out[21] | inst_ld_w;	// \\src\\main\\scala\\cpu\\tool.scala:12:7, :31:27, :46:83, :47:83, :48:83, :49:83, :50:83, :51:83, :52:43, :53:43, :55:83, :56:83, :57:83, :59:29, :61:29, :65:41, :71:{26,184}
  assign io_cs_sel_src2 =
    {_src2_is_R_data2_T | inst_slt | inst_sltu | inst_nor | inst_and | inst_or | inst_xor,
     inst_addi_w | inst_ld_w | inst_st_w | inst_slli_w | inst_srli_w | inst_srai_w,
     inst_lu12i_w,
     src2_is_4};	// \\src\\main\\scala\\cpu\\tool.scala:12:7, :46:83, :47:83, :48:83, :49:83, :50:83, :51:83, :52:43, :53:43, :55:83, :56:83, :57:83, :65:41, :66:41, :71:26, :73:91, :74:77, :76:28, :77:24
  assign io_cs_src1_is_pc = src2_is_4;	// \\src\\main\\scala\\cpu\\tool.scala:12:7, :76:28
  assign io_cs_alu_op =
    {inst_add_w | inst_addi_w | _Decoder6_64_io_out[19] | _Decoder6_64_io_out[21],
     inst_sub_w,
     inst_slt,
     inst_sltu,
     inst_nor,
     inst_and,
     inst_or,
     inst_xor,
     inst_lu12i_w,
     inst_slli_w,
     inst_srli_w,
     inst_srai_w};	// \\src\\main\\scala\\cpu\\tool.scala:12:7, :31:27, :44:83, :45:83, :46:83, :47:83, :48:83, :49:83, :50:83, :51:83, :52:43, :53:43, :55:83, :56:83, :57:83, :59:29, :61:29, :80:49, :81:22
  assign io_cs_mem_we = inst_st_w;	// \\src\\main\\scala\\cpu\\tool.scala:12:7, :66:41
  assign io_cs_wb_from_mem = inst_ld_w;	// \\src\\main\\scala\\cpu\\tool.scala:12:7, :65:41
  assign io_cs_sign_ext_offs26 = _Decoder6_64_io_out[20] | _Decoder6_64_io_out[21];	// \\src\\main\\scala\\cpu\\tool.scala:12:7, :31:27, :60:29, :61:29, :86:34
  assign io_cs_base_pc_add_offs =
    _Decoder6_64_io_out[19] | _Decoder6_64_io_out[20] | _Decoder6_64_io_out[21]
    | _Decoder6_64_io_out[22] & io_rj_eq_rd | _Decoder6_64_io_out[23] & ~io_rj_eq_rd;	// \\src\\main\\scala\\cpu\\tool.scala:12:7, :31:27, :59:29, :60:29, :61:29, :62:29, :63:29, :87:{63,77,87,90}
  assign io_cs_base_pc_from_rj = _Decoder6_64_io_out[19];	// \\src\\main\\scala\\cpu\\tool.scala:12:7, :31:27, :59:29
endmodule

module RegFile(	// \\src\\main\\scala\\cpu\\tool.scala:91:7
  input         clock,	// \\src\\main\\scala\\cpu\\tool.scala:91:7
                reset,	// \\src\\main\\scala\\cpu\\tool.scala:91:7
  input  [4:0]  io_raddr1,	// \\src\\main\\scala\\cpu\\tool.scala:92:14
                io_raddr2,	// \\src\\main\\scala\\cpu\\tool.scala:92:14
  output [31:0] io_rdata1,	// \\src\\main\\scala\\cpu\\tool.scala:92:14
                io_rdata2,	// \\src\\main\\scala\\cpu\\tool.scala:92:14
  input         io_we,	// \\src\\main\\scala\\cpu\\tool.scala:92:14
  input  [4:0]  io_waddr,	// \\src\\main\\scala\\cpu\\tool.scala:92:14
  input  [31:0] io_wdata	// \\src\\main\\scala\\cpu\\tool.scala:92:14
);

  reg  [31:0]       reg_0;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_1;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_2;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_3;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_4;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_5;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_6;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_7;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_8;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_9;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_10;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_11;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_12;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_13;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_14;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_15;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_16;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_17;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_18;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_19;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_20;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_21;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_22;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_23;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_24;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_25;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_26;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_27;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_28;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_29;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_30;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  reg  [31:0]       reg_31;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
  wire [31:0][31:0] _GEN =
    {{reg_31},
     {reg_30},
     {reg_29},
     {reg_28},
     {reg_27},
     {reg_26},
     {reg_25},
     {reg_24},
     {reg_23},
     {reg_22},
     {reg_21},
     {reg_20},
     {reg_19},
     {reg_18},
     {reg_17},
     {reg_16},
     {reg_15},
     {reg_14},
     {reg_13},
     {reg_12},
     {reg_11},
     {reg_10},
     {reg_9},
     {reg_8},
     {reg_7},
     {reg_6},
     {reg_5},
     {reg_4},
     {reg_3},
     {reg_2},
     {reg_1},
     {reg_0}};	// \\src\\main\\scala\\cpu\\tool.scala:103:20, :108:17
  always @(posedge clock) begin	// \\src\\main\\scala\\cpu\\tool.scala:91:7
    if (reset) begin	// \\src\\main\\scala\\cpu\\tool.scala:91:7
      reg_0 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_1 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_2 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_3 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_4 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_5 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_6 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_7 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_8 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_9 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_10 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_11 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_12 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_13 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_14 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_15 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_16 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_17 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_18 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_19 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_20 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_21 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_22 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_23 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_24 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_25 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_26 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_27 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_28 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_29 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_30 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
      reg_31 <= 32'h0;	// \\src\\main\\scala\\cpu\\tool.scala:103:{20,28}
    end
    else begin	// \\src\\main\\scala\\cpu\\tool.scala:91:7
      automatic logic _GEN_0 = io_we & (|io_waddr);	// \\src\\main\\scala\\cpu\\tool.scala:105:{14,26}
      if (_GEN_0 & ~(|io_waddr))	// \\src\\main\\scala\\cpu\\tool.scala:103:20, :105:{14,26,35}, :106:19
        reg_0 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h1)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_1 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h2)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_2 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h3)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_3 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h4)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_4 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h5)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_5 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h6)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_6 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h7)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_7 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h8)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_8 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h9)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_9 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'hA)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_10 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'hB)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_11 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'hC)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_12 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'hD)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_13 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'hE)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_14 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'hF)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_15 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h10)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_16 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h11)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_17 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h12)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_18 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h13)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_19 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h14)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_20 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h15)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_21 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h16)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_22 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h17)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_23 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h18)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_24 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h19)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_25 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h1A)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_26 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h1B)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_27 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h1C)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_28 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h1D)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_29 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & io_waddr == 5'h1E)	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20, :105:{14,35}, :106:19
        reg_30 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
      if (_GEN_0 & (&io_waddr))	// \\src\\main\\scala\\cpu\\tool.scala:103:20, :105:{14,35}, :106:19
        reg_31 <= io_wdata;	// \\src\\main\\scala\\cpu\\tool.scala:103:20
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// \\src\\main\\scala\\cpu\\tool.scala:91:7
    `ifdef FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\tool.scala:91:7
      `FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\tool.scala:91:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// \\src\\main\\scala\\cpu\\tool.scala:91:7
      automatic logic [31:0] _RANDOM[0:31];	// \\src\\main\\scala\\cpu\\tool.scala:91:7
      `ifdef INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\tool.scala:91:7
        `INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\tool.scala:91:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// \\src\\main\\scala\\cpu\\tool.scala:91:7
        for (logic [5:0] i = 6'h0; i < 6'h20; i += 6'h1) begin
          _RANDOM[i[4:0]] = `RANDOM;	// \\src\\main\\scala\\cpu\\tool.scala:91:7
        end	// \\src\\main\\scala\\cpu\\tool.scala:91:7
        reg_0 = _RANDOM[5'h0];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_1 = _RANDOM[5'h1];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_2 = _RANDOM[5'h2];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_3 = _RANDOM[5'h3];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_4 = _RANDOM[5'h4];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_5 = _RANDOM[5'h5];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_6 = _RANDOM[5'h6];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_7 = _RANDOM[5'h7];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_8 = _RANDOM[5'h8];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_9 = _RANDOM[5'h9];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_10 = _RANDOM[5'hA];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_11 = _RANDOM[5'hB];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_12 = _RANDOM[5'hC];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_13 = _RANDOM[5'hD];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_14 = _RANDOM[5'hE];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_15 = _RANDOM[5'hF];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_16 = _RANDOM[5'h10];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_17 = _RANDOM[5'h11];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_18 = _RANDOM[5'h12];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_19 = _RANDOM[5'h13];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_20 = _RANDOM[5'h14];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_21 = _RANDOM[5'h15];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_22 = _RANDOM[5'h16];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_23 = _RANDOM[5'h17];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_24 = _RANDOM[5'h18];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_25 = _RANDOM[5'h19];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_26 = _RANDOM[5'h1A];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_27 = _RANDOM[5'h1B];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_28 = _RANDOM[5'h1C];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_29 = _RANDOM[5'h1D];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_30 = _RANDOM[5'h1E];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
        reg_31 = _RANDOM[5'h1F];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:20
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\tool.scala:91:7
      `FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\tool.scala:91:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_rdata1 =
    io_raddr1 == 5'h0
      ? 32'h0
      : io_we & io_waddr == io_raddr1 ? io_wdata : _GEN[io_raddr1];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:28, :108:{17,24,35}, :111:{19,30}
  assign io_rdata2 =
    io_raddr2 == 5'h0
      ? 32'h0
      : io_we & io_waddr == io_raddr2 ? io_wdata : _GEN[io_raddr2];	// \\src\\main\\scala\\cpu\\tool.scala:91:7, :103:28, :108:17, :109:{17,24,35}, :112:{19,30}
endmodule

module ID_stage(	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
  input         clock,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
                reset,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
  input  [31:0] io_inst,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
                io_pc_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
  input         io_rf_we_WB,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
  input  [31:0] io_wb_data,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
  input  [4:0]  io_wb_addr_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
  output [4:0]  io_wb_addr_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
  output        io_rf_we_ID,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
  output [11:0] io_alu_op,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
  output        io_mem_we,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
                io_wb_from_mem,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
                io_base_pc_add_offs,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
                io_base_pc_from_rj,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
  output [31:0] io_pc_offs,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
                io_src1,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
                io_src2,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
                io_rf_data1,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
                io_rf_data2,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
                io_pc_out	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:40:14
);

  wire [31:0] _rf_regfile_io_rdata1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:102:26
  wire [31:0] _rf_regfile_io_rdata2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:102:26
  wire        _inst_frag_decoder_io_cs_src_reg_is_rd;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:86:33
  wire        _inst_frag_decoder_io_cs_w_addr_is_1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:86:33
  wire [3:0]  _inst_frag_decoder_io_cs_sel_src2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:86:33
  wire        _inst_frag_decoder_io_cs_src1_is_pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:86:33
  wire        _inst_frag_decoder_io_cs_sign_ext_offs26;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:86:33
  reg  [31:0] pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:72:15
  wire [9:0]  _GEN =
    _inst_frag_decoder_io_cs_sign_ext_offs26 ? io_inst[9:0] : {10{io_inst[25]}};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:83:24, :86:33, :123:20
  always @(posedge clock)	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
    pc <= io_pc_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:72:15
  `ifdef ENABLE_INITIAL_REG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
    `ifdef FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
      `FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
      automatic logic [31:0] _RANDOM[0:1];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
      `ifdef INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
        `INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
        end	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
        pc = {_RANDOM[1'h0][31:1], _RANDOM[1'h1][0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7, :72:15
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
      `FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Inst_Frag_Decoder inst_frag_decoder (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:86:33
    .io_op                  (io_inst[31:15]),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:76:21
    .io_rj_eq_rd            (_rf_regfile_io_rdata1 == _rf_regfile_io_rdata2),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:102:26, :113:22
    .io_cs_src_reg_is_rd    (_inst_frag_decoder_io_cs_src_reg_is_rd),
    .io_cs_w_addr_is_1      (_inst_frag_decoder_io_cs_w_addr_is_1),
    .io_cs_rf_we            (io_rf_we_ID),
    .io_cs_sel_src2         (_inst_frag_decoder_io_cs_sel_src2),
    .io_cs_src1_is_pc       (_inst_frag_decoder_io_cs_src1_is_pc),
    .io_cs_alu_op           (io_alu_op),
    .io_cs_mem_we           (io_mem_we),
    .io_cs_wb_from_mem      (io_wb_from_mem),
    .io_cs_sign_ext_offs26  (_inst_frag_decoder_io_cs_sign_ext_offs26),
    .io_cs_base_pc_add_offs (io_base_pc_add_offs),
    .io_cs_base_pc_from_rj  (io_base_pc_from_rj)
  );
  RegFile rf_regfile (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:102:26
    .clock     (clock),
    .reset     (reset),
    .io_raddr1 (io_inst[9:5]),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:77:16
    .io_raddr2 (_inst_frag_decoder_io_cs_src_reg_is_rd ? io_inst[4:0] : io_inst[14:10]),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:78:16, :79:16, :86:33, :107:30
    .io_rdata1 (_rf_regfile_io_rdata1),
    .io_rdata2 (_rf_regfile_io_rdata2),
    .io_we     (io_rf_we_WB),
    .io_waddr  (io_wb_addr_in),
    .io_wdata  (io_wb_data)
  );
  assign io_wb_addr_out = _inst_frag_decoder_io_cs_w_addr_is_1 ? 5'h1 : io_inst[4:0];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7, :79:16, :86:33, :104:18
  assign io_pc_offs = {{4{_GEN[9]}}, _GEN, io_inst[25:10], 2'h0};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7, :82:20, :123:{14,20}
  assign io_src1 = _inst_frag_decoder_io_cs_src1_is_pc ? pc : _rf_regfile_io_rdata1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7, :72:15, :86:33, :102:26, :119:17
  assign io_src2 =
    {29'h0, _inst_frag_decoder_io_cs_sel_src2[0], 2'h0}
    | (_inst_frag_decoder_io_cs_sel_src2[1] ? {io_inst[24:5], 12'h0} : 32'h0)
    | (_inst_frag_decoder_io_cs_sel_src2[2] ? {{20{io_inst[21]}}, io_inst[21:10]} : 32'h0)
    | (_inst_frag_decoder_io_cs_sel_src2[3] ? _rf_regfile_io_rdata2 : 32'h0);	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7, :80:18, :81:18, :86:33, :102:26, :117:23, src/main/scala/chisel3/util/Mux.scala:30:73, :32:36
  assign io_rf_data1 = _rf_regfile_io_rdata1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7, :102:26
  assign io_rf_data2 = _rf_regfile_io_rdata2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7, :102:26
  assign io_pc_out = pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:39:7, :72:15
endmodule

module ALU(	// \\src\\main\\scala\\cpu\\tool.scala:114:7
  input  [11:0] io_alu_op,	// \\src\\main\\scala\\cpu\\tool.scala:118:14
  input  [31:0] io_src1,	// \\src\\main\\scala\\cpu\\tool.scala:118:14
                io_src2,	// \\src\\main\\scala\\cpu\\tool.scala:118:14
  output [31:0] io_alu_res,	// \\src\\main\\scala\\cpu\\tool.scala:118:14
                io_mem_addr	// \\src\\main\\scala\\cpu\\tool.scala:118:14
);

  wire [31:0] _add_w_res_T = io_src1 + io_src2;	// \\src\\main\\scala\\cpu\\tool.scala:126:27
  wire [31:0] _io_alu_res_T_22 = io_src1 | io_src2;	// \\src\\main\\scala\\cpu\\tool.scala:130:27
  wire [62:0] slli_w = {{31{io_src1[31]}}, io_src1} << io_src2[4:0];	// \\src\\main\\scala\\cpu\\tool.scala:125:20, :126:27, :135:24
  wire [31:0] _GEN = {27'h0, io_src2[4:0]};	// \\src\\main\\scala\\cpu\\tool.scala:125:20, :136:32
  assign io_alu_res =
    (io_alu_op[0] ? $signed($signed(io_src1) >>> _GEN) : 32'h0)
    | (io_alu_op[1] ? io_src1 >> _GEN : 32'h0) | (io_alu_op[2] ? slli_w[31:0] : 32'h0)
    | (io_alu_op[3] ? io_src2 : 32'h0) | (io_alu_op[4] ? io_src1 ^ io_src2 : 32'h0)
    | (io_alu_op[5] ? _io_alu_res_T_22 : 32'h0)
    | (io_alu_op[6] ? io_src1 & io_src2 : 32'h0)
    | (io_alu_op[7] ? ~_io_alu_res_T_22 : 32'h0)
    | (io_alu_op[8] ? {31'h0, io_src1 < io_src2} : 32'h0)
    | (io_alu_op[9] ? {31'h0, $signed(io_src1) < $signed(io_src2)} : 32'h0)
    | (io_alu_op[10] ? io_src1 - io_src2 : 32'h0)
    | (io_alu_op[11] ? _add_w_res_T : 32'h0);	// \\src\\main\\scala\\cpu\\tool.scala:114:7, :126:27, :127:27, :128:29, :129:37, :130:{17,27}, :131:25, :133:25, :135:24, :136:32, :137:24, src/main/scala/chisel3/util/Mux.scala:30:73, :32:36
  assign io_mem_addr = _add_w_res_T;	// \\src\\main\\scala\\cpu\\tool.scala:114:7, :126:27
endmodule

module EXE_stage(	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7
  input         clock,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7
  input  [31:0] io_src1,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
                io_src2,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
                io_rf_data2,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
  input  [11:0] io_alu_op,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
  input         io_mem_we_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
  output        io_mem_we_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
  input         io_wb_from_mem_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
  output        io_wb_from_mem_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
  input         io_rf_we_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
  output        io_rf_we_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
  output [31:0] io_alu_res,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
                io_mem_addr,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
                io_mem_data,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
  input  [4:0]  io_wb_addr_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
  output [4:0]  io_wb_addr_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
  input  [31:0] io_pc_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
  output [31:0] io_pc_out	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:130:14
);

  reg [31:0] pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:157:15
  reg [4:0]  wb_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:161:20
  reg [31:0] src1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:165:17
  reg [31:0] src2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:166:17
  reg [11:0] alu_op;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:167:19
  reg        mem_we;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:170:19
  reg        wb_from_mem;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:174:24
  reg        rf_we;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:18
  reg [31:0] rf_data2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:190:21
  always @(posedge clock) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7
    pc <= io_pc_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:157:15
    wb_addr <= io_wb_addr_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:161:20
    src1 <= io_src1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:165:17
    src2 <= io_src2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:166:17
    alu_op <= io_alu_op;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:167:19
    mem_we <= io_mem_we_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:170:19
    wb_from_mem <= io_wb_from_mem_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:174:24
    rf_we <= io_rf_we_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:178:18
    rf_data2 <= io_rf_data2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:190:21
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7
    `ifdef FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7
      `FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7
      automatic logic [31:0] _RANDOM[0:4];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7
      `ifdef INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7
        `INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7
        end	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7
        pc = {_RANDOM[3'h0][31:1], _RANDOM[3'h1][0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7, :157:15
        wb_addr = _RANDOM[3'h1][5:1];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7, :157:15, :161:20
        src1 = {_RANDOM[3'h1][31:6], _RANDOM[3'h2][5:0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7, :157:15, :165:17
        src2 = {_RANDOM[3'h2][31:6], _RANDOM[3'h3][5:0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7, :165:17, :166:17
        alu_op = _RANDOM[3'h3][17:6];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7, :166:17, :167:19
        mem_we = _RANDOM[3'h3][18];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7, :166:17, :170:19
        wb_from_mem = _RANDOM[3'h3][19];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7, :166:17, :174:24
        rf_we = _RANDOM[3'h3][20];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7, :166:17, :178:18
        rf_data2 = {_RANDOM[3'h3][31:21], _RANDOM[3'h4][20:0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7, :166:17, :190:21
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7
      `FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ALU alu (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:184:19
    .io_alu_op   (alu_op),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:167:19
    .io_src1     (src1),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:165:17
    .io_src2     (src2),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:166:17
    .io_alu_res  (io_alu_res),
    .io_mem_addr (io_mem_addr)
  );
  assign io_mem_we_out = mem_we;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7, :170:19
  assign io_wb_from_mem_out = wb_from_mem;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7, :174:24
  assign io_rf_we_out = rf_we;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7, :178:18
  assign io_mem_data = rf_data2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7, :190:21
  assign io_wb_addr_out = wb_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7, :161:20
  assign io_pc_out = pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:129:7, :157:15
endmodule

module MEM_stage(	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7
  input         clock,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7
  input  [31:0] io_alu_res,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:196:14
  output [31:0] io_wb_data,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:196:14
  input         io_wb_from_mem,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:196:14
  input  [31:0] io_mem_value,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:196:14
  input         io_rf_we_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:196:14
  output        io_rf_we_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:196:14
  input  [4:0]  io_wb_addr_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:196:14
  output [4:0]  io_wb_addr_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:196:14
  input  [31:0] io_pc_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:196:14
  output [31:0] io_pc_out	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:196:14
);

  reg [31:0] pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:216:15
  reg [4:0]  wb_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:220:20
  reg [31:0] alu_res;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:224:20
  reg        rf_we;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:226:18
  reg        wb_from_mem;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:230:24
  always @(posedge clock) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7
    pc <= io_pc_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:216:15
    wb_addr <= io_wb_addr_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:220:20
    alu_res <= io_alu_res;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:224:20
    rf_we <= io_rf_we_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:226:18
    wb_from_mem <= io_wb_from_mem;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:230:24
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7
    `ifdef FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7
      `FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7
      automatic logic [31:0] _RANDOM[0:2];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7
      `ifdef INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7
        `INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7
        end	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7
        pc = {_RANDOM[2'h0][31:1], _RANDOM[2'h1][0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7, :216:15
        wb_addr = _RANDOM[2'h1][5:1];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7, :216:15, :220:20
        alu_res = {_RANDOM[2'h1][31:6], _RANDOM[2'h2][5:0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7, :216:15, :224:20
        rf_we = _RANDOM[2'h2][6];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7, :224:20, :226:18
        wb_from_mem = _RANDOM[2'h2][7];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7, :224:20, :230:24
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7
      `FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_wb_data = wb_from_mem ? io_mem_value : alu_res;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7, :224:20, :230:24, :233:20
  assign io_rf_we_out = rf_we;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7, :226:18
  assign io_wb_addr_out = wb_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7, :220:20
  assign io_pc_out = pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:195:7, :216:15
endmodule

module WB_stage(	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7
  input         clock,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7
  input  [31:0] io_wb_data_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:236:14
  output [31:0] io_wb_data_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:236:14
  input         io_rf_we_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:236:14
  output        io_rf_we_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:236:14
  input  [4:0]  io_wb_addr_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:236:14
  output [4:0]  io_wb_addr_out,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:236:14
  input  [31:0] io_pc_in,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:236:14
  output [31:0] io_pc_out	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:236:14
);

  reg [31:0] pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:254:15
  reg [31:0] wb_data;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:258:20
  reg [4:0]  wb_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:262:20
  reg        rf_we;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:266:18
  always @(posedge clock) begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7
    pc <= io_pc_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:254:15
    wb_data <= io_wb_data_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:258:20
    wb_addr <= io_wb_addr_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:262:20
    rf_we <= io_rf_we_in;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:266:18
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7
    `ifdef FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7
      `FIRRTL_BEFORE_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7
      automatic logic [31:0] _RANDOM[0:2];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7
      `ifdef INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7
        `INIT_RANDOM_PROLOG_	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7
        end	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7
        pc = {_RANDOM[2'h0][31:1], _RANDOM[2'h1][0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7, :254:15
        wb_data = {_RANDOM[2'h1][31:1], _RANDOM[2'h2][0]};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7, :254:15, :258:20
        wb_addr = _RANDOM[2'h2][5:1];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7, :258:20, :262:20
        rf_we = _RANDOM[2'h2][6];	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7, :258:20, :266:18
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7
      `FIRRTL_AFTER_INITIAL	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_wb_data_out = wb_data;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7, :258:20
  assign io_rf_we_out = rf_we;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7, :266:18
  assign io_wb_addr_out = wb_addr;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7, :262:20
  assign io_pc_out = pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:235:7, :254:15
endmodule

module minicpu_top_pipline(	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:271:7
  input         clock,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:271:7
                reset,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:271:7
  output        io_inst_sram_en,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:14
  output [3:0]  io_inst_sram_we,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:14
  output [31:0] io_inst_sram_addr,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:14
                io_inst_sram_wdata,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:14
  input  [31:0] io_inst_sram_rdata,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:14
  output        io_data_sram_en,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:14
  output [3:0]  io_data_sram_we,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:14
  output [31:0] io_data_sram_addr,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:14
                io_data_sram_wdata,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:14
  input  [31:0] io_data_sram_rdata,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:14
  output [31:0] io_debug_wb_pc,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:14
  output [3:0]  io_debug_wb_rf_we,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:14
  output [4:0]  io_debug_wb_rf_wnum,	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:14
  output [31:0] io_debug_wb_rf_wdata	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:272:14
);

  wire [31:0] _wb_stage_io_wb_data_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:349:24
  wire        _wb_stage_io_rf_we_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:349:24
  wire [4:0]  _wb_stage_io_wb_addr_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:349:24
  wire [31:0] _mem_stage_io_wb_data;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:332:25
  wire        _mem_stage_io_rf_we_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:332:25
  wire [4:0]  _mem_stage_io_wb_addr_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:332:25
  wire [31:0] _mem_stage_io_pc_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:332:25
  wire        _exe_stage_io_mem_we_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:317:25
  wire        _exe_stage_io_wb_from_mem_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:317:25
  wire        _exe_stage_io_rf_we_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:317:25
  wire [31:0] _exe_stage_io_alu_res;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:317:25
  wire [4:0]  _exe_stage_io_wb_addr_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:317:25
  wire [31:0] _exe_stage_io_pc_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:317:25
  wire [4:0]  _id_stage_io_wb_addr_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
  wire        _id_stage_io_rf_we_ID;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
  wire [11:0] _id_stage_io_alu_op;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
  wire        _id_stage_io_mem_we;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
  wire        _id_stage_io_wb_from_mem;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
  wire        _id_stage_io_base_pc_add_offs;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
  wire        _id_stage_io_base_pc_from_rj;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
  wire [31:0] _id_stage_io_pc_offs;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
  wire [31:0] _id_stage_io_src1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
  wire [31:0] _id_stage_io_src2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
  wire [31:0] _id_stage_io_rf_data1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
  wire [31:0] _id_stage_io_rf_data2;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
  wire [31:0] _id_stage_io_pc_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
  wire [31:0] _if_stage_io_inst;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:294:24
  wire [31:0] _if_stage_io_pc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:294:24
  wire [31:0] _pre_if_io_nextpc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:290:22
  pre_IF pre_if (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:290:22
    .clock               (clock),
    .reset               (reset),
    .io_offs_ext         (_id_stage_io_pc_offs),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
    .io_gr_rj            (_id_stage_io_rf_data1),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
    .io_pc               (_id_stage_io_pc_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
    .io_base_pc_add_offs (_id_stage_io_base_pc_add_offs),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
    .io_base_pc_from_rj  (_id_stage_io_base_pc_from_rj),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
    .io_nextpc           (_pre_if_io_nextpc)
  );
  IF_stage if_stage (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:294:24
    .io_nextpc          (_pre_if_io_nextpc),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:290:22
    .io_inst_sram_rdata (io_inst_sram_rdata),
    .io_inst            (_if_stage_io_inst),
    .io_pc              (_if_stage_io_pc)
  );
  ID_stage id_stage (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
    .clock               (clock),
    .reset               (reset),
    .io_inst             (_if_stage_io_inst),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:294:24
    .io_pc_in            (_if_stage_io_pc),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:294:24
    .io_rf_we_WB         (_wb_stage_io_rf_we_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:349:24
    .io_wb_data          (_wb_stage_io_wb_data_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:349:24
    .io_wb_addr_in       (_wb_stage_io_wb_addr_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:349:24
    .io_wb_addr_out      (_id_stage_io_wb_addr_out),
    .io_rf_we_ID         (_id_stage_io_rf_we_ID),
    .io_alu_op           (_id_stage_io_alu_op),
    .io_mem_we           (_id_stage_io_mem_we),
    .io_wb_from_mem      (_id_stage_io_wb_from_mem),
    .io_base_pc_add_offs (_id_stage_io_base_pc_add_offs),
    .io_base_pc_from_rj  (_id_stage_io_base_pc_from_rj),
    .io_pc_offs          (_id_stage_io_pc_offs),
    .io_src1             (_id_stage_io_src1),
    .io_src2             (_id_stage_io_src2),
    .io_rf_data1         (_id_stage_io_rf_data1),
    .io_rf_data2         (_id_stage_io_rf_data2),
    .io_pc_out           (_id_stage_io_pc_out)
  );
  EXE_stage exe_stage (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:317:25
    .clock              (clock),
    .io_src1            (_id_stage_io_src1),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
    .io_src2            (_id_stage_io_src2),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
    .io_rf_data2        (_id_stage_io_rf_data2),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
    .io_alu_op          (_id_stage_io_alu_op),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
    .io_mem_we_in       (_id_stage_io_mem_we),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
    .io_mem_we_out      (_exe_stage_io_mem_we_out),
    .io_wb_from_mem_in  (_id_stage_io_wb_from_mem),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
    .io_wb_from_mem_out (_exe_stage_io_wb_from_mem_out),
    .io_rf_we_in        (_id_stage_io_rf_we_ID),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
    .io_rf_we_out       (_exe_stage_io_rf_we_out),
    .io_alu_res         (_exe_stage_io_alu_res),
    .io_mem_addr        (io_data_sram_addr),
    .io_mem_data        (io_data_sram_wdata),
    .io_wb_addr_in      (_id_stage_io_wb_addr_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
    .io_wb_addr_out     (_exe_stage_io_wb_addr_out),
    .io_pc_in           (_id_stage_io_pc_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:304:24
    .io_pc_out          (_exe_stage_io_pc_out)
  );
  MEM_stage mem_stage (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:332:25
    .clock          (clock),
    .io_alu_res     (_exe_stage_io_alu_res),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:317:25
    .io_wb_data     (_mem_stage_io_wb_data),
    .io_wb_from_mem (_exe_stage_io_wb_from_mem_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:317:25
    .io_mem_value   (io_data_sram_rdata),
    .io_rf_we_in    (_exe_stage_io_rf_we_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:317:25
    .io_rf_we_out   (_mem_stage_io_rf_we_out),
    .io_wb_addr_in  (_exe_stage_io_wb_addr_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:317:25
    .io_wb_addr_out (_mem_stage_io_wb_addr_out),
    .io_pc_in       (_exe_stage_io_pc_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:317:25
    .io_pc_out      (_mem_stage_io_pc_out)
  );
  WB_stage wb_stage (	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:349:24
    .clock          (clock),
    .io_wb_data_in  (_mem_stage_io_wb_data),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:332:25
    .io_wb_data_out (_wb_stage_io_wb_data_out),
    .io_rf_we_in    (_mem_stage_io_rf_we_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:332:25
    .io_rf_we_out   (_wb_stage_io_rf_we_out),
    .io_wb_addr_in  (_mem_stage_io_wb_addr_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:332:25
    .io_wb_addr_out (_wb_stage_io_wb_addr_out),
    .io_pc_in       (_mem_stage_io_pc_out),	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:332:25
    .io_pc_out      (io_debug_wb_pc)
  );
  assign io_inst_sram_en = 1'h1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:271:7, :296:19
  assign io_inst_sram_we = 4'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:271:7, :297:19
  assign io_inst_sram_addr = _pre_if_io_nextpc;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:271:7, :290:22
  assign io_inst_sram_wdata = 32'h0;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:271:7, :299:22
  assign io_data_sram_en = 1'h1;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:271:7, :296:19
  assign io_data_sram_we = {2{{2{_exe_stage_io_mem_we_out}}}};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:271:7, :317:25, :339:25
  assign io_debug_wb_rf_we = {2{{2{_wb_stage_io_rf_we_out}}}};	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:271:7, :349:24, :363:27
  assign io_debug_wb_rf_wnum = _wb_stage_io_wb_addr_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:271:7, :349:24
  assign io_debug_wb_rf_wdata = _wb_stage_io_wb_data_out;	// \\src\\main\\scala\\cpu\\minicpu_top_pipline.scala:271:7, :349:24
endmodule

